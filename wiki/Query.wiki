#sidebar StoreTableOfContents
<wiki:toc max_depth="3" />

= Introduction =

This page presents the implementation of Sparql available in emftriple.

=Query=

==Sparql==

{{{
Sparql sparql = new Sparql().select("s").where(
				triple(var("s"), var("name"), literal("Foo"))
			);
}}}

==Sparql Native==

{{{
SparqlNative sparql = new SparqlNative(
    "prefix xsd: <"+XSD.NS+"> "+
    "select ?s where { " +
	?s ?name \"Foo\"^^xsd:string }");
}}}

=Sparql API Guide=

==Sparql object==
A Query API is provided in emftriple to query RDF stores. The API lets you easily write SPARQL queries. 
EClass and EStructuralFeature can be use in the query instead of RDF types.

{{{
import static com.emftriple.query.Sparql.iri;
import static com.emftriple.query.Sparql.triple;
import static com.emftriple.query.Sparql.var;

EClass person = ModelPackage.eINSTANCE.getPerson();
Sparql sparql = new Sparql()
                        .where(
                           triple(var("s"), iri(RDF.type), person)
                        );
}}}

==Variables==

{{{
import static com.emftriple.query.Sparql.var;

triple( var("s"), var("p"), var("o"))
}}}

==Literal==

==Triple==

==Union==

==Filter==
The query is executed by loading an EMF Resource. The resource needs to have the query in its URI. For that we use the method toURI that takes the base resource URI as parameter.


=Result=

{{{
Resource query = resourceSet.createResource(sparql.toURI(URI.createURI("emftriple://data?graph=http//graph")));
query.load(null);
}}}

The result of a query is a resource having for root object a ListResult. This object contains the tree of objects loaded by the query.
 
{{{
ListResult result = (ListResult) query.getContents().get(0);
}}}

The resulting objects can be obtained like this:

{{{
Person p = (Person) result.getResult().get(0);
}}}