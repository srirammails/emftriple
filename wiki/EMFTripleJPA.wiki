#summary One-sentence summary of this page.
#sidebar StoreTableOfContents

Emftriple provides an implementation of the core interfaces of JPA 2.0. The usage of the Emftriple JPA API is detailed below.


=Entity Manager=

{{{

public class Example {

	static {
		EPackage.Registry.INSTANCE.put(EmployeePackage.eNS_URI, EmployeePackage.eINSTANCE);
		EPackage.Registry.INSTANCE.put(PersistencePackage.eNS_URI, PersistencePackage.eINSTANCE);
	}

	public static void main(String[] args) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("employee");
		EntityManager em = emf.createEntityManager();
		
		...		
	}
}
}}}

==Persisting Objects==

{{{
EntityManager em = emf.createEntityManager();
...
Employee employee = EmployeeFactory.eINSTANCE.createEmployee();
employee.setFirstName("Bob");
employee.setLastName("Smith");
employee.setGender(Gender.MALE);
employee.setSalary(35000);
...	
em.getTransaction().begin();

em.persist(employee);
em.flush();
		
em.getTransaction().commit();
}}}

==Loading Objects==

{{{
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();
		
Employee emp = em.find(Employee.class, URI.createURI("http://www.example.com/employees/john_smith"));
...
Employee emp2 = em.merge(emp);
...

em.flush();
em.getTransaction().commit();
}}}

==EMF Resources==

{{{
Resource res = new ETripleResource(
			URI.createURI("emftriple://unit=employee&?query=SELECT p FROM SmallProject p WHERE p.name = 'Enterprise'"));

try {
		res.load(null);
} catch (IOException e) {
	e.printStackTrace();
}
}}}

=Queries=


==JPQL Queries==

{{{
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

List<Employee> allEmployee = em.createQuery("SELECT e FROM Employee e", Employee.class)
	.setMaxResults(10)
	.getResultList();
...
em.getTransaction().commit();
}}}

===Named Queries===
{{{
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

TypedQuery<Employee> q = em.createNamedQuery("findEmployeeByName", Employee.class)
	.setParameter("first", "Betty")
	.setParameter("last", "Jones");

List<Employee> list = q.getResultList();
...
em.getTransaction().commit();
}}}

==SPARQL Queries==

{{{
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

Query q = em.createNativeQuery("CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }");
	
List<?> list = q.getResultList();
...
em.getTransaction().commit();
}}}