#summary Converter to RDF.
#labels Featured
#sidebar StoreTableOfContents

Eclipse Modeling for Semantic Web comes out with XMI to RDF converters. Those are available in the RDF Transformations plugin.

==RDF Transformations== 
A Converter to RDF is a tool which converts application data from an application-specific format into RDF for use with RDF tools and integration with other data. Converters may be part of a one-time migration effort, or part of a running system which provides a semantic web view of a given application. (http://esw.w3.org/ConverterToRdf).

===Project Dependencies===
The component can be used in an eclipse plugin. Do to so, create a new eclipse plugin with the wizard find under: 
File -> New -> Plug-in development -> Plug-in Project. 

Then add the required dependencies to the Plug-in manifest, as depicted by the following pictures.
Required dependencies for the RDFIzer component:
 * com.atl.common
 * com.emf4sw.rdf
 * com.emf4sw.rdf.transform
Then choose one of Jena or Sesame as backend:

For Jena add
 * com.emf4sw.rdf.jena
and add Jena dependencies to the project classpath or add the following osgi bundle:
 * org.openjena

For Sesame add
 * com.emf4sw.rdf.sesame
and add Sesame dependencies to the project classpath or add the following osgi bundle:
 * org.openrdf

==Usage==
  
The RDF Transformations plugin can be use to convert any EMF Models as RDF documents via the Model2RDF class or convert a RDF document as a EMF Model thanks to the RDF2Model class.

===Models to RDF=== 
The following code excerpt shows how to generate a RDF document from a model.

{{{ 
// Register Resource Factories

Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ecore", new XMIResourceFactoryImpl());		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("rdf", new TTLResourceFactory());

// Register Metamodel
Models.register(Models.resource("metamodel.ecore", true));

Resource resource = Models.resource(URI.createURI("model.xmi"));
resource.load(null);

// Execute the transformation
Model2RDF m2r = new Model2RDF();
Resource rdf = m2r.transform(resource, null);
		
// URI where the document will be save
rdf.setURI(URI.createURI("model.rdf"));
rdf.save(null);
}}}

===RDF to Model===

{{{
Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ecore", new XMIResourceFactoryImpl());
Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ttl", new RDFTurtleResourceFactory());
		
ResourceSet resourceSet = Models.resourceSet();
Resource metamodel = resourceSet.createResource(URI.createURI("src/resources/employee.ecore"));
try {
  metamodel.load(null);
} catch (IOException e) {
  e.printStackTrace();
}

RDFIzer rdfizer = new RDFIzer(metamodel);
Resource rdf = resourceSet.createResource(URI.createURI("src/resources/model.ttl"));
try {
  rdf.load(null);
} catch (IOException e) {
  e.printStackTrace();
}
		
Resource model = rdfizer.toModel(rdf2);
model.setURI(URI.createURI("src/resources/model.xmi"));
try {
  model.save(null);
} catch (IOException e) {
 e.printStackTrace();
}
}}}