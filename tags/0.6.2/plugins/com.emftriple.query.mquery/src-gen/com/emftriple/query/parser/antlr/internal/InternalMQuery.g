/*
* generated by Xtext
*/
parser grammar InternalMQuery;

options {
	tokenVocab=InternalMQuery;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package com.emftriple.query.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.emftriple.query.services.MQueryGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

 	private MQueryGrammarAccess grammarAccess;
 	
    public InternalMQueryParser(TokenStream input, IAstFactory factory, MQueryGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/emftriple/query/parser/antlr/internal/InternalMQuery.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "QueryModule";	
   	} 
   	   	
   	@Override
   	protected MQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleQueryModule
entryRuleQueryModule returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getQueryModuleRule(), currentNode); }
	 iv_ruleQueryModule=ruleQueryModule 
	 { $current=$iv_ruleQueryModule.current; } 
	 EOF 
;

// Rule QueryModule
ruleQueryModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryModuleAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryModuleAccess().getDefaultQueryMQueryParserRuleCall_1_0(), currentNode); 
	    }
		lv_defaultQuery_1_0=ruleMQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultQuery",
	        		lv_defaultQuery_1_0, 
	        		"MQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryModuleAccess().getNamedQueriesNamedQueryParserRuleCall_2_0(), currentNode); 
	    }
		lv_namedQueries_2_0=ruleNamedQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"namedQueries",
	        		lv_namedQueries_2_0, 
	        		"NamedQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_55 
    {
        createLeafNode(grammarAccess.getImportAccess().getIMPORTKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNamedQuery
entryRuleNamedQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedQueryRule(), currentNode); }
	 iv_ruleNamedQuery=ruleNamedQuery 
	 { $current=$iv_ruleNamedQuery.current; } 
	 EOF 
;

// Rule NamedQuery
ruleNamedQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNamedQueryAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getNamedQueryAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamedQueryAccess().getQueryMQueryParserRuleCall_2_0(), currentNode); 
	    }
		lv_query_2_0=ruleMQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_2_0, 
	        		"MQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMQuery
entryRuleMQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMQueryRule(), currentNode); }
	 iv_ruleMQuery=ruleMQuery 
	 { $current=$iv_ruleMQuery.current; } 
	 EOF 
;

// Rule MQuery
ruleMQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMQueryAccess().getSelectStatementParserRuleCall_0(), currentNode); 
    }
    this_SelectStatement_0=ruleSelectStatement
    {
        $current = $this_SelectStatement_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMQueryAccess().getUpdateStatementParserRuleCall_1(), currentNode); 
    }
    this_UpdateStatement_1=ruleUpdateStatement
    {
        $current = $this_UpdateStatement_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMQueryAccess().getDeleteStatementParserRuleCall_2(), currentNode); 
    }
    this_DeleteStatement_2=ruleDeleteStatement
    {
        $current = $this_DeleteStatement_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectStatementRule(), currentNode); }
	 iv_ruleSelectStatement=ruleSelectStatement 
	 { $current=$iv_ruleSelectStatement.current; } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectStatementAccess().getSelectFromClauseSelectFromClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_selectFromClause_0_0=ruleSelectFromClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"selectFromClause",
	        		lv_selectFromClause_0_0, 
	        		"SelectFromClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_whereClause_1_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_1_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectStatementAccess().getHavingHavingClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_having_2_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"having",
	        		lv_having_2_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectStatementAccess().getOrderOrderClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_order_3_0=ruleOrderClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"order",
	        		lv_order_3_0, 
	        		"OrderClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleHavingClause
entryRuleHavingClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getHavingClauseRule(), currentNode); }
	 iv_ruleHavingClause=ruleHavingClause 
	 { $current=$iv_ruleHavingClause.current; } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_54 
    {
        createLeafNode(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHavingClauseAccess().getHavingOrExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_having_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHavingClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"having",
	        		lv_having_1_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOrderClause
entryRuleOrderClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrderClauseRule(), currentNode); }
	 iv_ruleOrderClause=ruleOrderClause 
	 { $current=$iv_ruleOrderClause.current; } 
	 EOF 
;

// Rule OrderClause
ruleOrderClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_47 
    {
        createLeafNode(grammarAccess.getOrderClauseAccess().getORDERKeyword_0(), null); 
    }

	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getOrderClauseAccess().getBYKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_2_0(), currentNode); 
	    }
		lv_ordering_2_0=ruleOrderItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ordering",
	        		lv_ordering_2_0, 
	        		"OrderItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getOrderClauseAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrderClauseAccess().getOrderingOrderItemParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_ordering_4_0=ruleOrderItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ordering",
	        		lv_ordering_4_0, 
	        		"OrderItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*((
(
		lv_isAsc_5_0=
	KEYWORD_22 
    {
        createLeafNode(grammarAccess.getOrderClauseAccess().getIsAscASCKeyword_4_0_0(), "isAsc"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAsc", true, "ASC", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_isDesc_6_0=
	KEYWORD_31 
    {
        createLeafNode(grammarAccess.getOrderClauseAccess().getIsDescDESCKeyword_4_1_0(), "isDesc"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDesc", true, "DESC", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleOrderItem
entryRuleOrderItem returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrderItemRule(), currentNode); }
	 iv_ruleOrderItem=ruleOrderItem 
	 { $current=$iv_ruleOrderItem.current; } 
	 EOF 
;

// Rule OrderItem
ruleOrderItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrderItemAccess().getVarFromEntryCrossReference_0_0(), "var"); 
	}

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getOrderItemAccess().getFullStopKeyword_1(), null); 
    }
(
(
		lv_feature_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOrderItemAccess().getFeatureIDTerminalRuleCall_2_0(), "feature"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"feature",
	        		lv_feature_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpdateStatementRule(), currentNode); }
	 iv_ruleUpdateStatement=ruleUpdateStatement 
	 { $current=$iv_ruleUpdateStatement.current; } 
	 EOF 
;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateStatementAccess().getUpdateClauseUpdateClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_updateClause_0_0=ruleUpdateClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"updateClause",
	        		lv_updateClause_0_0, 
	        		"UpdateClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateStatementAccess().getSetClauseSetClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_setClause_1_0=ruleSetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"setClause",
	        		lv_setClause_1_0, 
	        		"SetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateStatementAccess().getWhereClauseWhereClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_whereClause_2_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_2_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleUpdateClause
entryRuleUpdateClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpdateClauseRule(), currentNode); }
	 iv_ruleUpdateClause=ruleUpdateClause 
	 { $current=$iv_ruleUpdateClause.current; } 
	 EOF 
;

// Rule UpdateClause
ruleUpdateClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_60 
    {
        createLeafNode(grammarAccess.getUpdateClauseAccess().getUPDATEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_1_0(), currentNode); 
	    }
		lv_fromEntries_1_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromEntries",
	        		lv_fromEntries_1_0, 
	        		"FromEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getUpdateClauseAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromEntries",
	        		lv_fromEntries_3_0, 
	        		"FromEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSetClause
entryRuleSetClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSetClauseRule(), currentNode); }
	 iv_ruleSetClause=ruleSetClause 
	 { $current=$iv_ruleSetClause.current; } 
	 EOF 
;

// Rule SetClause
ruleSetClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_29 
    {
        createLeafNode(grammarAccess.getSetClauseAccess().getSETKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"UpdateItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getSetClauseAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetClauseAccess().getItemsUpdateItemParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_items_3_0=ruleUpdateItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_3_0, 
	        		"UpdateItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUpdateItem
entryRuleUpdateItem returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpdateItemRule(), currentNode); }
	 iv_ruleUpdateItem=ruleUpdateItem 
	 { $current=$iv_ruleUpdateItem.current; } 
	 EOF 
;

// Rule UpdateItem
ruleUpdateItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateItemAccess().getAliasAliasAttributeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_alias_0_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_0_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateItemAccess().getValueValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Value", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeleteStatementRule(), currentNode); }
	 iv_ruleDeleteStatement=ruleDeleteStatement 
	 { $current=$iv_ruleDeleteStatement.current; } 
	 EOF 
;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteStatementAccess().getDeleteClauseDeleteClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_deleteClause_0_0=ruleDeleteClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"deleteClause",
	        		lv_deleteClause_0_0, 
	        		"DeleteClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteStatementAccess().getWhereClauseWhereClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_whereClause_1_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_1_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleDeleteClause
entryRuleDeleteClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeleteClauseRule(), currentNode); }
	 iv_ruleDeleteClause=ruleDeleteClause 
	 { $current=$iv_ruleDeleteClause.current; } 
	 EOF 
;

// Rule DeleteClause
ruleDeleteClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_52 
    {
        createLeafNode(grammarAccess.getDeleteClauseAccess().getDELETEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteClauseAccess().getFromClauseFromClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fromClause",
	        		lv_fromClause_1_0, 
	        		"FromClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSelectFromClause
entryRuleSelectFromClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectFromClauseRule(), currentNode); }
	 iv_ruleSelectFromClause=ruleSelectFromClause 
	 { $current=$iv_ruleSelectFromClause.current; } 
	 EOF 
;

// Rule SelectFromClause
ruleSelectFromClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectFromClauseAccess().getSelectClauseSelectClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_selectClause_0_0=ruleSelectClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"selectClause",
	        		lv_selectClause_0_0, 
	        		"SelectClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectFromClauseAccess().getFromClauseFromClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_fromClause_1_0=ruleFromClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fromClause",
	        		lv_fromClause_1_0, 
	        		"FromClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSelectClause
entryRuleSelectClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectClauseRule(), currentNode); }
	 iv_ruleSelectClause=ruleSelectClause 
	 { $current=$iv_ruleSelectClause.current; } 
	 EOF 
;

// Rule SelectClause
ruleSelectClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_59 
    {
        createLeafNode(grammarAccess.getSelectClauseAccess().getSELECTKeyword_0(), null); 
    }
(
(
		lv_isDistinct_1_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getSelectClauseAccess().getIsDistinctDISTINCTKeyword_1_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"SelectExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getSelectClauseAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getExpressionsSelectExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_expressions_4_0=ruleSelectExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_4_0, 
	        		"SelectExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSelectExpression
entryRuleSelectExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectExpressionRule(), currentNode); }
	 iv_ruleSelectExpression=ruleSelectExpression 
	 { $current=$iv_ruleSelectExpression.current; } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectExpressionAccess().getAliasAttributeExpressionParserRuleCall_0(), currentNode); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectAggregateExpressionParserRuleCall_1(), currentNode); 
    }
    this_SelectAggregateExpression_1=ruleSelectAggregateExpression
    {
        $current = $this_SelectAggregateExpression_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectExpressionAccess().getSelectConstructorExpressionParserRuleCall_2(), currentNode); 
    }
    this_SelectConstructorExpression_2=ruleSelectConstructorExpression
    {
        $current = $this_SelectConstructorExpression_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSelectAggregateExpression
entryRuleSelectAggregateExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectAggregateExpressionRule(), currentNode); }
	 iv_ruleSelectAggregateExpression=ruleSelectAggregateExpression 
	 { $current=$iv_ruleSelectAggregateExpression.current; } 
	 EOF 
;

// Rule SelectAggregateExpression
ruleSelectAggregateExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getAvgAggregateParserRuleCall_0(), currentNode); 
    }
    this_AvgAggregate_0=ruleAvgAggregate
    {
        $current = $this_AvgAggregate_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMaxAggregateParserRuleCall_1(), currentNode); 
    }
    this_MaxAggregate_1=ruleMaxAggregate
    {
        $current = $this_MaxAggregate_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getMinAggregateParserRuleCall_2(), currentNode); 
    }
    this_MinAggregate_2=ruleMinAggregate
    {
        $current = $this_MinAggregate_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getSumAggregateParserRuleCall_3(), currentNode); 
    }
    this_SumAggregate_3=ruleSumAggregate
    {
        $current = $this_SumAggregate_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectAggregateExpressionAccess().getCountAggregateParserRuleCall_4(), currentNode); 
    }
    this_CountAggregate_4=ruleCountAggregate
    {
        $current = $this_CountAggregate_4.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAvgAggregate
entryRuleAvgAggregate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAvgAggregateRule(), currentNode); }
	 iv_ruleAvgAggregate=ruleAvgAggregate 
	 { $current=$iv_ruleAvgAggregate.current; } 
	 EOF 
;

// Rule AvgAggregate
ruleAvgAggregate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_23 
    {
        createLeafNode(grammarAccess.getAvgAggregateAccess().getAVGKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getAvgAggregateAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getAvgAggregateAccess().getIsDistinctDISTINCTKeyword_2_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAvgAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAvgAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAvgAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getAvgAggregateAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleMaxAggregate
entryRuleMaxAggregate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMaxAggregateRule(), currentNode); }
	 iv_ruleMaxAggregate=ruleMaxAggregate 
	 { $current=$iv_ruleMaxAggregate.current; } 
	 EOF 
;

// Rule MaxAggregate
ruleMaxAggregate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_24 
    {
        createLeafNode(grammarAccess.getMaxAggregateAccess().getMAXKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getMaxAggregateAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getMaxAggregateAccess().getIsDistinctDISTINCTKeyword_2_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaxAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMaxAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaxAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getMaxAggregateAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleMinAggregate
entryRuleMinAggregate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinAggregateRule(), currentNode); }
	 iv_ruleMinAggregate=ruleMinAggregate 
	 { $current=$iv_ruleMinAggregate.current; } 
	 EOF 
;

// Rule MinAggregate
ruleMinAggregate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getMinAggregateAccess().getMINKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getMinAggregateAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getMinAggregateAccess().getIsDistinctDISTINCTKeyword_2_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMinAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getMinAggregateAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSumAggregate
entryRuleSumAggregate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSumAggregateRule(), currentNode); }
	 iv_ruleSumAggregate=ruleSumAggregate 
	 { $current=$iv_ruleSumAggregate.current; } 
	 EOF 
;

// Rule SumAggregate
ruleSumAggregate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_30 
    {
        createLeafNode(grammarAccess.getSumAggregateAccess().getSUMKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getSumAggregateAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getSumAggregateAccess().getIsDistinctDISTINCTKeyword_2_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSumAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSumAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSumAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getSumAggregateAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCountAggregate
entryRuleCountAggregate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCountAggregateRule(), currentNode); }
	 iv_ruleCountAggregate=ruleCountAggregate 
	 { $current=$iv_ruleCountAggregate.current; } 
	 EOF 
;

// Rule CountAggregate
ruleCountAggregate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_41 
    {
        createLeafNode(grammarAccess.getCountAggregateAccess().getCOUNTKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getCountAggregateAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_isDistinct_2_0=
	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getCountAggregateAccess().getIsDistinctDISTINCTKeyword_2_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCountAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCountAggregateAccess().getItemAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_item_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCountAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getCountAggregateAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSelectConstructorExpression
entryRuleSelectConstructorExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectConstructorExpressionRule(), currentNode); }
	 iv_ruleSelectConstructorExpression=ruleSelectConstructorExpression 
	 { $current=$iv_ruleSelectConstructorExpression.current; } 
	 EOF 
;

// Rule SelectConstructorExpression
ruleSelectConstructorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_27 
    {
        createLeafNode(grammarAccess.getSelectConstructorExpressionAccess().getNEWKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSelectConstructorExpressionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectConstructorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getSelectConstructorExpressionAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_items_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectConstructorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getSelectConstructorExpressionAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectConstructorExpressionAccess().getItemsAliasAttributeExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_items_5_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectConstructorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_5_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getSelectConstructorExpressionAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleFromClause
entryRuleFromClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClauseRule(), currentNode); }
	 iv_ruleFromClause=ruleFromClause 
	 { $current=$iv_ruleFromClause.current; } 
	 EOF 
;

// Rule FromClause
ruleFromClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_32 
    {
        createLeafNode(grammarAccess.getFromClauseAccess().getFROMKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromClassParserRuleCall_1_0(), currentNode); 
	    }
		lv_fromEntries_1_0=ruleFromClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromEntries",
	        		lv_fromEntries_1_0, 
	        		"FromClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getFromClauseAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromEntriesFromEntryParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_fromEntries_3_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromEntries",
	        		lv_fromEntries_3_0, 
	        		"FromEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleFromEntry
entryRuleFromEntry returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromEntryRule(), currentNode); }
	 iv_ruleFromEntry=ruleFromEntry 
	 { $current=$iv_ruleFromEntry.current; } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromEntryAccess().getFromClassParserRuleCall_0(), currentNode); 
    }
    this_FromClass_0=ruleFromClass
    {
        $current = $this_FromClass_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromEntryAccess().getFromCollectionParserRuleCall_1(), currentNode); 
    }
    this_FromCollection_1=ruleFromCollection
    {
        $current = $this_FromCollection_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclarationRule(), currentNode); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getASKeyword_0(), null); 
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleFromClass
entryRuleFromClass returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClassRule(), currentNode); }
	 iv_ruleFromClass=ruleFromClass 
	 { $current=$iv_ruleFromClass.current; } 
	 EOF 
;

// Rule FromClass
ruleFromClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromClassAccess().getFromClassIdParserRuleCall_0(), currentNode); 
    }
    this_FromClassId_0=ruleFromClassId
    {
        $current = $this_FromClassId_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromClassAccess().getFromClassVarParserRuleCall_1(), currentNode); 
    }
    this_FromClassVar_1=ruleFromClassVar
    {
        $current = $this_FromClassVar_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFromClassId
entryRuleFromClassId returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClassIdRule(), currentNode); }
	 iv_ruleFromClassId=ruleFromClassId 
	 { $current=$iv_ruleFromClassId.current; } 
	 EOF 
;

// Rule FromClassId
ruleFromClassId returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_type_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFromClassIdAccess().getTypeIDTerminalRuleCall_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassIdRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleFromClassVar
entryRuleFromClassVar returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClassVarRule(), currentNode); }
	 iv_ruleFromClassVar=ruleFromClassVar 
	 { $current=$iv_ruleFromClassVar.current; } 
	 EOF 
;

// Rule FromClassVar
ruleFromClassVar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_type_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFromClassVarAccess().getTypeIDTerminalRuleCall_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClassVarAccess().getVariableVariableDeclarationParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"VariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClassVarAccess().getJoinsFromJoinParserRuleCall_2_0(), currentNode); 
	    }
		lv_joins_2_0=ruleFromJoin		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"joins",
	        		lv_joins_2_0, 
	        		"FromJoin", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleFromCollection
entryRuleFromCollection returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromCollectionRule(), currentNode); }
	 iv_ruleFromCollection=ruleFromCollection 
	 { $current=$iv_ruleFromCollection.current; } 
	 EOF 
;

// Rule FromCollection
ruleFromCollection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getFromCollectionAccess().getINKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getFromCollectionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromCollectionAccess().getPathAliasAttributeExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromCollectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_2_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getFromCollectionAccess().getRightParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromCollectionAccess().getVariableVariableDeclarationParserRuleCall_4_0(), currentNode); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromCollectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_4_0, 
	        		"VariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFromJoin
entryRuleFromJoin returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromJoinRule(), currentNode); }
	 iv_ruleFromJoin=ruleFromJoin 
	 { $current=$iv_ruleFromJoin.current; } 
	 EOF 
;

// Rule FromJoin
ruleFromJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getJoinParserRuleCall_0(), currentNode); 
    }
    this_Join_0=ruleJoin
    {
        $current = $this_Join_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getLeftJoinParserRuleCall_1(), currentNode); 
    }
    this_LeftJoin_1=ruleLeftJoin
    {
        $current = $this_LeftJoin_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getInnerJoinParserRuleCall_2(), currentNode); 
    }
    this_InnerJoin_2=ruleInnerJoin
    {
        $current = $this_InnerJoin_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getJoinRule(), currentNode); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_33 
    {
        createLeafNode(grammarAccess.getJoinAccess().getJOINKeyword_0(), null); 
    }
(
(
		lv_isFetch_1_0=
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getJoinAccess().getIsFetchFETCHKeyword_1_0(), "isFetch"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFetch", true, "FETCH", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJoinAccess().getPathAliasAttributeExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_path_2_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_2_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJoinAccess().getVariableVariableDeclarationParserRuleCall_3_0(), currentNode); 
	    }
		lv_variable_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"VariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLeftJoin
entryRuleLeftJoin returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLeftJoinRule(), currentNode); }
	 iv_ruleLeftJoin=ruleLeftJoin 
	 { $current=$iv_ruleLeftJoin.current; } 
	 EOF 
;

// Rule LeftJoin
ruleLeftJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_34 
    {
        createLeafNode(grammarAccess.getLeftJoinAccess().getLEFTKeyword_0(), null); 
    }
(
(
		lv_isOuter_1_0=
	KEYWORD_48 
    {
        createLeafNode(grammarAccess.getLeftJoinAccess().getIsOuterOUTERKeyword_1_0(), "isOuter"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOuter", true, "OUTER", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_33 
    {
        createLeafNode(grammarAccess.getLeftJoinAccess().getJOINKeyword_2(), null); 
    }
(
(
		lv_isFetch_3_0=
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getLeftJoinAccess().getIsFetchFETCHKeyword_3_0(), "isFetch"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFetch", true, "FETCH", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLeftJoinAccess().getPathAliasAttributeExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_path_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_4_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLeftJoinAccess().getVariableVariableDeclarationParserRuleCall_5_0(), currentNode); 
	    }
		lv_variable_5_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_5_0, 
	        		"VariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInnerJoin
entryRuleInnerJoin returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInnerJoinRule(), currentNode); }
	 iv_ruleInnerJoin=ruleInnerJoin 
	 { $current=$iv_ruleInnerJoin.current; } 
	 EOF 
;

// Rule InnerJoin
ruleInnerJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_45 
    {
        createLeafNode(grammarAccess.getInnerJoinAccess().getINNERKeyword_0(), null); 
    }

	KEYWORD_33 
    {
        createLeafNode(grammarAccess.getInnerJoinAccess().getJOINKeyword_1(), null); 
    }
(
(
		lv_isFetch_2_0=
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getInnerJoinAccess().getIsFetchFETCHKeyword_2_0(), "isFetch"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInnerJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFetch", true, "FETCH", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInnerJoinAccess().getPathAliasAttributeExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_path_3_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInnerJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_3_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInnerJoinAccess().getVariableVariableDeclarationParserRuleCall_4_0(), currentNode); 
	    }
		lv_variable_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInnerJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_4_0, 
	        		"VariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhereClauseRule(), currentNode); }
	 iv_ruleWhereClause=ruleWhereClause 
	 { $current=$iv_ruleWhereClause.current; } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_50 
    {
        createLeafNode(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhereClauseAccess().getWhereEntryOrExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_whereEntry_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhereClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereEntry",
	        		lv_whereEntry_1_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    {
        $current = $this_AndExpression_0.current;
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getOrExpressionEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getORKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getEntriesAndExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_3_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getConcreteExpressionParserRuleCall_0(), currentNode); 
    }
    this_ConcreteExpression_0=ruleConcreteExpression
    {
        $current = $this_ConcreteExpression_0.current;
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getAndExpressionEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getEntriesConcreteExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleConcreteExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_3_0, 
	        		"ConcreteExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleConcreteExpression
entryRuleConcreteExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcreteExpressionRule(), currentNode); }
	 iv_ruleConcreteExpression=ruleConcreteExpression 
	 { $current=$iv_ruleConcreteExpression.current; } 
	 EOF 
;

// Rule ConcreteExpression
ruleConcreteExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getParExpressionParserRuleCall_0(), currentNode); 
    }
    this_ParExpression_0=ruleParExpression
    {
        $current = $this_ParExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getOperatorExpressionParserRuleCall_1(), currentNode); 
    }
    this_OperatorExpression_1=ruleOperatorExpression
    {
        $current = $this_OperatorExpression_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getExistsExpressionParserRuleCall_2(), currentNode); 
    }
    this_ExistsExpression_2=ruleExistsExpression
    {
        $current = $this_ExistsExpression_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getAllExpressionParserRuleCall_3(), currentNode); 
    }
    this_AllExpression_3=ruleAllExpression
    {
        $current = $this_AllExpression_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getAnyExpressionParserRuleCall_4(), currentNode); 
    }
    this_AnyExpression_4=ruleAnyExpression
    {
        $current = $this_AnyExpression_4.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getSomeExpressionParserRuleCall_5(), currentNode); 
    }
    this_SomeExpression_5=ruleSomeExpression
    {
        $current = $this_SomeExpression_5.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getCollectionExpressionParserRuleCall_6(), currentNode); 
    }
    this_CollectionExpression_6=ruleCollectionExpression
    {
        $current = $this_CollectionExpression_6.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getNullComparisonExpressionParserRuleCall_7(), currentNode); 
    }
    this_NullComparisonExpression_7=ruleNullComparisonExpression
    {
        $current = $this_NullComparisonExpression_7.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getEmptyComparisonExpressionParserRuleCall_8(), currentNode); 
    }
    this_EmptyComparisonExpression_8=ruleEmptyComparisonExpression
    {
        $current = $this_EmptyComparisonExpression_8.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getLikeExpressionParserRuleCall_9(), currentNode); 
    }
    this_LikeExpression_9=ruleLikeExpression
    {
        $current = $this_LikeExpression_9.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getInExpressionParserRuleCall_10(), currentNode); 
    }
    this_InExpression_10=ruleInExpression
    {
        $current = $this_InExpression_10.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteExpressionAccess().getBetweenExpressionParserRuleCall_11(), currentNode); 
    }
    this_BetweenExpression_11=ruleBetweenExpression
    {
        $current = $this_BetweenExpression_11.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParExpressionRule(), currentNode); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParExpressionAccess().getExpressionTermParserRuleCall_1(), currentNode); 
    }
    this_ExpressionTerm_1=ruleExpressionTerm
    {
        $current = $this_ExpressionTerm_1.current;
        currentNode = currentNode.getParent();
    }

	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleOperatorExpression
entryRuleOperatorExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperatorExpressionRule(), currentNode); }
	 iv_ruleOperatorExpression=ruleOperatorExpression 
	 { $current=$iv_ruleOperatorExpression.current; } 
	 EOF 
;

// Rule OperatorExpression
ruleOperatorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperatorExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperatorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperatorExpressionAccess().getOperatorOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperatorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_1_0, 
	        		"Operator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperatorExpressionAccess().getRhsExpressionTermParserRuleCall_2_0(), currentNode); 
	    }
		lv_rhs_2_0=ruleExpressionTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperatorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_2_0, 
	        		"ExpressionTerm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleExistsExpression
entryRuleExistsExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExistsExpressionRule(), currentNode); }
	 iv_ruleExistsExpression=ruleExistsExpression 
	 { $current=$iv_ruleExistsExpression.current; } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isNot_0_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getExistsExpressionAccess().getIsNotNOTKeyword_0_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_53 
    {
        createLeafNode(grammarAccess.getExistsExpressionAccess().getEXISTSKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExistsExpressionAccess().getQueryQueryExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_query_2_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_2_0, 
	        		"QueryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAllExpression
entryRuleAllExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAllExpressionRule(), currentNode); }
	 iv_ruleAllExpression=ruleAllExpression 
	 { $current=$iv_ruleAllExpression.current; } 
	 EOF 
;

// Rule AllExpression
ruleAllExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_19 
    {
        createLeafNode(grammarAccess.getAllExpressionAccess().getALLKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAllExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAllExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_1_0, 
	        		"QueryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAnyExpression
entryRuleAnyExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnyExpressionRule(), currentNode); }
	 iv_ruleAnyExpression=ruleAnyExpression 
	 { $current=$iv_ruleAnyExpression.current; } 
	 EOF 
;

// Rule AnyExpression
ruleAnyExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_21 
    {
        createLeafNode(grammarAccess.getAnyExpressionAccess().getANYKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnyExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnyExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_1_0, 
	        		"QueryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSomeExpression
entryRuleSomeExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSomeExpressionRule(), currentNode); }
	 iv_ruleSomeExpression=ruleSomeExpression 
	 { $current=$iv_ruleSomeExpression.current; } 
	 EOF 
;

// Rule SomeExpression
ruleSomeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_38 
    {
        createLeafNode(grammarAccess.getSomeExpressionAccess().getSOMEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSomeExpressionAccess().getQueryQueryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_query_1_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSomeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_1_0, 
	        		"QueryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionExpressionRule(), currentNode); }
	 iv_ruleCollectionExpression=ruleCollectionExpression 
	 { $current=$iv_ruleCollectionExpression.current; } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getCollectionExpressionAccess().getIsNotNOTKeyword_1_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_58 
    {
        createLeafNode(grammarAccess.getCollectionExpressionAccess().getMEMBERKeyword_2(), null); 
    }
(
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getCollectionExpressionAccess().getOFKeyword_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionExpressionAccess().getRhsAliasAttributeExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_rhs_4_0=ruleAliasAttributeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_4_0, 
	        		"AliasAttributeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNullComparisonExpression
entryRuleNullComparisonExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullComparisonExpressionRule(), currentNode); }
	 iv_ruleNullComparisonExpression=ruleNullComparisonExpression 
	 { $current=$iv_ruleNullComparisonExpression.current; } 
	 EOF 
;

// Rule NullComparisonExpression
ruleNullComparisonExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNullComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getNullComparisonExpressionAccess().getISKeyword_1(), null); 
    }
(
(
		lv_isNot_2_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getNullComparisonExpressionAccess().getIsNotNOTKeyword_2_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_36 
    {
        createLeafNode(grammarAccess.getNullComparisonExpressionAccess().getNULLKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleEmptyComparisonExpression
entryRuleEmptyComparisonExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmptyComparisonExpressionRule(), currentNode); }
	 iv_ruleEmptyComparisonExpression=ruleEmptyComparisonExpression 
	 { $current=$iv_ruleEmptyComparisonExpression.current; } 
	 EOF 
;

// Rule EmptyComparisonExpression
ruleEmptyComparisonExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmptyComparisonExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmptyComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getEmptyComparisonExpressionAccess().getISKeyword_1(), null); 
    }
(
(
		lv_isNot_2_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getEmptyComparisonExpressionAccess().getIsNotNOTKeyword_2_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmptyComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_42 
    {
        createLeafNode(grammarAccess.getEmptyComparisonExpressionAccess().getEMPTYKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleLikeExpression
entryRuleLikeExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLikeExpressionRule(), currentNode); }
	 iv_ruleLikeExpression=ruleLikeExpression 
	 { $current=$iv_ruleLikeExpression.current; } 
	 EOF 
;

// Rule LikeExpression
ruleLikeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLikeExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLikeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getLikeExpressionAccess().getIsNotNOTKeyword_1_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLikeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_35 
    {
        createLeafNode(grammarAccess.getLikeExpressionAccess().getLIKEKeyword_2(), null); 
    }
(
(
		lv_pattern_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLikeExpressionAccess().getPatternSTRINGTerminalRuleCall_3_0(), "pattern"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLikeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInExpressionRule(), currentNode); }
	 iv_ruleInExpression=ruleInExpression 
	 { $current=$iv_ruleInExpression.current; } 
	 EOF 
;

// Rule InExpression
ruleInExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInExpressionAccess().getInSeqExpressionParserRuleCall_0(), currentNode); 
    }
    this_InSeqExpression_0=ruleInSeqExpression
    {
        $current = $this_InSeqExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInExpressionAccess().getInQueryExpressionParserRuleCall_1(), currentNode); 
    }
    this_InQueryExpression_1=ruleInQueryExpression
    {
        $current = $this_InQueryExpression_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInSeqExpression
entryRuleInSeqExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInSeqExpressionRule(), currentNode); }
	 iv_ruleInSeqExpression=ruleInSeqExpression 
	 { $current=$iv_ruleInSeqExpression.current; } 
	 EOF 
;

// Rule InSeqExpression
ruleInSeqExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInSeqExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInSeqExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getInSeqExpressionAccess().getIsNotNOTKeyword_1_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInSeqExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getInSeqExpressionAccess().getINKeyword_2(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getInSeqExpressionAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_4_0(), currentNode); 
	    }
		lv_items_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInSeqExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getInSeqExpressionAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInSeqExpressionAccess().getItemsVariableParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_items_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInSeqExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_6_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getInSeqExpressionAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleInQueryExpression
entryRuleInQueryExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInQueryExpressionRule(), currentNode); }
	 iv_ruleInQueryExpression=ruleInQueryExpression 
	 { $current=$iv_ruleInQueryExpression.current; } 
	 EOF 
;

// Rule InQueryExpression
ruleInQueryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInQueryExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInQueryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getInQueryExpressionAccess().getIsNotNOTKeyword_1_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInQueryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getInQueryExpressionAccess().getINKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInQueryExpressionAccess().getQueryQueryExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_query_3_0=ruleQueryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInQueryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_3_0, 
	        		"QueryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBetweenExpression
entryRuleBetweenExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBetweenExpressionRule(), currentNode); }
	 iv_ruleBetweenExpression=ruleBetweenExpression 
	 { $current=$iv_ruleBetweenExpression.current; } 
	 EOF 
;

// Rule BetweenExpression
ruleBetweenExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBetweenExpressionAccess().getLhsVariableParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_isNot_1_0=
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getBetweenExpressionAccess().getIsNotNOTKeyword_1_0(), "isNot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "NOT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_61 
    {
        createLeafNode(grammarAccess.getBetweenExpressionAccess().getBETWEENKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBetweenExpressionAccess().getMinValueParserRuleCall_3_0(), currentNode); 
	    }
		lv_min_3_0=ruleValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"min",
	        		lv_min_3_0, 
	        		"Value", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getBetweenExpressionAccess().getANDKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBetweenExpressionAccess().getMaxValueParserRuleCall_5_0(), currentNode); 
	    }
		lv_max_5_0=ruleValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"max",
	        		lv_max_5_0, 
	        		"Value", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getAliasAttributeExpressionParserRuleCall_0(), currentNode); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    {
        $current = $this_AliasAttributeExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getParameterExpressionParserRuleCall_1(), currentNode); 
    }
    this_ParameterExpression_1=ruleParameterExpression
    {
        $current = $this_ParameterExpression_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getValueParserRuleCall_2(), currentNode); 
    }
    this_Value_2=ruleValue
    {
        $current = $this_Value_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpressionTerm
entryRuleExpressionTerm returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionTermRule(), currentNode); }
	 iv_ruleExpressionTerm=ruleExpressionTerm 
	 { $current=$iv_ruleExpressionTerm.current; } 
	 EOF 
;

// Rule ExpressionTerm
ruleExpressionTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionTermAccess().getVariableParserRuleCall_0(), currentNode); 
    }
    this_Variable_0=ruleVariable
    {
        $current = $this_Variable_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionTermAccess().getQueryExpressionParserRuleCall_1(), currentNode); 
    }
    this_QueryExpression_1=ruleQueryExpression
    {
        $current = $this_QueryExpression_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAliasAttributeExpressionRule(), currentNode); }
	 iv_ruleAliasAttributeExpression=ruleAliasAttributeExpression 
	 { $current=$iv_ruleAliasAttributeExpression.current; } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasAttributeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getAliasVariableDeclarationCrossReference_0_0(), "alias"); 
	}

)
)(
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		lv_attributes_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getAttributesIDTerminalRuleCall_1_1_0(), "attributes"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasAttributeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*)
;





// Entry rule entryRuleParameterExpression
entryRuleParameterExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterExpressionRule(), currentNode); }
	 iv_ruleParameterExpression=ruleParameterExpression 
	 { $current=$iv_ruleParameterExpression.current; } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getParameterExpressionAccess().getColonKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterExpressionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;







// Entry rule entryRuleStringFunction
entryRuleStringFunction returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringFunctionRule(), currentNode); }
	 iv_ruleStringFunction=ruleStringFunction 
	 { $current=$iv_ruleStringFunction.current; } 
	 EOF 
;

// Rule StringFunction
ruleStringFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringFunctionAccess().getNameStringFunctionNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleStringFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"StringFunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getStringFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_2_0(), currentNode); 
	    }
		lv_params_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_2_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getStringFunctionAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringFunctionAccess().getParamsVariableParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_params_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getStringFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStringFunctionName
entryRuleStringFunctionName returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getStringFunctionNameRule(), currentNode); } 
	 iv_ruleStringFunctionName=ruleStringFunctionName 
	 { $current=$iv_ruleStringFunctionName.current.getText(); }  
	 EOF 
;

// Rule StringFunctionName
ruleStringFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_51 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getCONCATKeyword_0(), null); 
    }

    |
	kw=KEYWORD_63 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getSUBSTRINGKeyword_1(), null); 
    }

    |
	kw=KEYWORD_46 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getLOWERKeyword_2(), null); 
    }

    |
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getUPPERKeyword_3(), null); 
    }

    |
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getLENGTHKeyword_4(), null); 
    }

    |
	kw=KEYWORD_57 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStringFunctionNameAccess().getLOCATEKeyword_5(), null); 
    }
)
    ;





// Entry rule entryRuleNumericFunction
entryRuleNumericFunction returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumericFunctionRule(), currentNode); }
	 iv_ruleNumericFunction=ruleNumericFunction 
	 { $current=$iv_ruleNumericFunction.current; } 
	 EOF 
;

// Rule NumericFunction
ruleNumericFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericFunctionAccess().getNameNumericFunctionNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNumericFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NumericFunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getNumericFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_2_0(), currentNode); 
	    }
		lv_params_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_2_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getNumericFunctionAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericFunctionAccess().getParamsVariableParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_params_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getNumericFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleNumericFunctionName
entryRuleNumericFunctionName returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getNumericFunctionNameRule(), currentNode); } 
	 iv_ruleNumericFunctionName=ruleNumericFunctionName 
	 { $current=$iv_ruleNumericFunctionName.current.getText(); }  
	 EOF 
;

// Rule NumericFunctionName
ruleNumericFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumericFunctionNameAccess().getABSKeyword_0(), null); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumericFunctionNameAccess().getSQRTKeyword_1(), null); 
    }

    |
	kw=KEYWORD_26 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumericFunctionNameAccess().getMODKeyword_2(), null); 
    }

    |
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumericFunctionNameAccess().getSIZEKeyword_3(), null); 
    }
)
    ;







// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueRule(), currentNode); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getIntegerExpressionParserRuleCall_0(), currentNode); 
    }
    this_IntegerExpression_0=ruleIntegerExpression
    {
        $current = $this_IntegerExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getStringExpressionParserRuleCall_1(), currentNode); 
    }
    this_StringExpression_1=ruleStringExpression
    {
        $current = $this_StringExpression_1.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getNullExpressionParserRuleCall_2(), currentNode); 
    }
    this_NullExpression_2=ruleNullExpression
    {
        $current = $this_NullExpression_2.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getBooleanExpressionParserRuleCall_3(), currentNode); 
    }
    this_BooleanExpression_3=ruleBooleanExpression
    {
        $current = $this_BooleanExpression_3.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getDateTimeExpressionParserRuleCall_4(), currentNode); 
    }
    this_DateTimeExpression_4=ruleDateTimeExpression
    {
        $current = $this_DateTimeExpression_4.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerExpressionRule(), currentNode); }
	 iv_ruleIntegerExpression=ruleIntegerExpression 
	 { $current=$iv_ruleIntegerExpression.current; } 
	 EOF 
;

// Rule IntegerExpression
ruleIntegerExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringExpressionRule(), currentNode); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullExpressionRule(), currentNode); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=
	KEYWORD_36 
    {
        createLeafNode(grammarAccess.getNullExpressionAccess().getValueNULLKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "NULL", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_value_0_1=
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", true, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_2=
	KEYWORD_43 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getValueFALSEKeyword_0_1(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", true, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRuleDateTimeExpression
entryRuleDateTimeExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateTimeExpressionRule(), currentNode); }
	 iv_ruleDateTimeExpression=ruleDateTimeExpression 
	 { $current=$iv_ruleDateTimeExpression.current; } 
	 EOF 
;

// Rule DateTimeExpression
ruleDateTimeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_LITERALTEMPORAL
		{
			createLeafNode(grammarAccess.getDateTimeExpressionAccess().getValueLiteralTemporalTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"LiteralTemporal", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleQueryExpression
entryRuleQueryExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getQueryExpressionRule(), currentNode); }
	 iv_ruleQueryExpression=ruleQueryExpression 
	 { $current=$iv_ruleQueryExpression.current; } 
	 EOF 
;

// Rule QueryExpression
ruleQueryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getQueryExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getQueryExpressionAccess().getSelectStatementParserRuleCall_1(), currentNode); 
    }
    this_SelectStatement_1=ruleSelectStatement
    {
        $current = $this_SelectStatement_1.current;
        currentNode = currentNode.getParent();
    }

	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getQueryExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((    KEYWORD_6
	{
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0(), null); 
    }
)
    |(    KEYWORD_8
	{
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1(), null); 
    }
)
    |(    KEYWORD_10
	{
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2(), null); 
    }
)
    |(    KEYWORD_11
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
)
    |(    KEYWORD_7
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4(), null); 
    }
)
    |(    KEYWORD_9
	{
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5(), null); 
    }
));



