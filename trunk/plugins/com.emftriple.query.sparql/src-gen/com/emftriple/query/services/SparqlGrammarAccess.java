/*
* generated by Xtext
*/

package com.emftriple.query.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SparqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SPARQLQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPARQLQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectionQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////	DeleteInsertQuery
		//SPARQLQuery:
		//	SelectionQuery | UpdateQuery;
		public ParserRule getRule() { return rule; }

		//SelectionQuery | UpdateQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectionQuery
		public RuleCall getSelectionQueryParserRuleCall_0() { return cSelectionQueryParserRuleCall_0; }

		//UpdateQuery
		public RuleCall getUpdateQueryParserRuleCall_1() { return cUpdateQueryParserRuleCall_1; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPREFIXKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIrefAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIrefIRI_TERMINALTerminalRuleCall_0_3_0 = (RuleCall)cIrefAssignment_0_3.eContents().get(0);
		private final RuleCall cUnNamedPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Prefix:
		//	"PREFIX" name=ID ":" iref=IRI_TERMINAL | UnNamedPrefix;
		public ParserRule getRule() { return rule; }

		//"PREFIX" name=ID ":" iref=IRI_TERMINAL | UnNamedPrefix
		public Alternatives getAlternatives() { return cAlternatives; }

		//"PREFIX" name=ID ":" iref=IRI_TERMINAL
		public Group getGroup_0() { return cGroup_0; }

		//"PREFIX"
		public Keyword getPREFIXKeyword_0_0() { return cPREFIXKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//iref=IRI_TERMINAL
		public Assignment getIrefAssignment_0_3() { return cIrefAssignment_0_3; }

		//IRI_TERMINAL
		public RuleCall getIrefIRI_TERMINALTerminalRuleCall_0_3_0() { return cIrefIRI_TERMINALTerminalRuleCall_0_3_0; }

		//UnNamedPrefix
		public RuleCall getUnNamedPrefixParserRuleCall_1() { return cUnNamedPrefixParserRuleCall_1; }
	}

	public class UnNamedPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnNamedPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPREFIXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIrefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIrefIRI_TERMINALTerminalRuleCall_2_0 = (RuleCall)cIrefAssignment_2.eContents().get(0);
		
		//UnNamedPrefix returns Prefix:
		//	"PREFIX" ":" iref=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//"PREFIX" ":" iref=IRI_TERMINAL
		public Group getGroup() { return cGroup; }

		//"PREFIX"
		public Keyword getPREFIXKeyword_0() { return cPREFIXKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//iref=IRI_TERMINAL
		public Assignment getIrefAssignment_2() { return cIrefAssignment_2; }

		//IRI_TERMINAL
		public RuleCall getIrefIRI_TERMINALTerminalRuleCall_2_0() { return cIrefIRI_TERMINALTerminalRuleCall_2_0; }
	}

	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIrefIRIParserRuleCall_1_0 = (RuleCall)cIrefAssignment_1.eContents().get(0);
		
		//Base:
		//	"BASE" iref=IRI;
		public ParserRule getRule() { return rule; }

		//"BASE" iref=IRI
		public Group getGroup() { return cGroup; }

		//"BASE"
		public Keyword getBASEKeyword_0() { return cBASEKeyword_0; }

		//iref=IRI
		public Assignment getIrefAssignment_1() { return cIrefAssignment_1; }

		//IRI
		public RuleCall getIrefIRIParserRuleCall_1_0() { return cIrefIRIParserRuleCall_1_0; }
	}

	public class SelectionQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstructQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAskQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescribeQueryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SelectionQuery:
		//	ConstructQuery | SelectQuery | AskQuery | DescribeQuery;
		public ParserRule getRule() { return rule; }

		//ConstructQuery | SelectQuery | AskQuery | DescribeQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstructQuery
		public RuleCall getConstructQueryParserRuleCall_0() { return cConstructQueryParserRuleCall_0; }

		//SelectQuery
		public RuleCall getSelectQueryParserRuleCall_1() { return cSelectQueryParserRuleCall_1; }

		//AskQuery
		public RuleCall getAskQueryParserRuleCall_2() { return cAskQueryParserRuleCall_2; }

		//DescribeQuery
		public RuleCall getDescribeQueryParserRuleCall_3() { return cDescribeQueryParserRuleCall_3; }
	}

	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectAllQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectVariablesQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelectQuery:
		//	SelectAllQuery | SelectVariablesQuery;
		public ParserRule getRule() { return rule; }

		//SelectAllQuery | SelectVariablesQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectAllQuery
		public RuleCall getSelectAllQueryParserRuleCall_0() { return cSelectAllQueryParserRuleCall_0; }

		//SelectVariablesQuery
		public RuleCall getSelectVariablesQueryParserRuleCall_1() { return cSelectVariablesQueryParserRuleCall_1; }
	}

	public class SelectAllQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAllQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Keyword cSELECTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIsDistinctAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cIsDistinctDISTINCTKeyword_3_0_0 = (Keyword)cIsDistinctAssignment_3_0.eContents().get(0);
		private final Assignment cIsReducedAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cIsReducedREDUCEDKeyword_3_1_0 = (Keyword)cIsReducedAssignment_3_1.eContents().get(0);
		private final Assignment cAllAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cAllAsteriskKeyword_4_0 = (Keyword)cAllAssignment_4.eContents().get(0);
		private final Assignment cDatasetClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDatasetClauseDatasetClauseParserRuleCall_5_0 = (RuleCall)cDatasetClauseAssignment_5.eContents().get(0);
		private final Assignment cWhereClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_6_0 = (RuleCall)cWhereClauseAssignment_6.eContents().get(0);
		private final Assignment cGroupClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_7_0 = (RuleCall)cGroupClauseAssignment_7.eContents().get(0);
		private final Assignment cHavingClauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_8_0 = (RuleCall)cHavingClauseAssignment_8.eContents().get(0);
		private final Assignment cLimitClauseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLimitClauseLimitClauseParserRuleCall_9_0 = (RuleCall)cLimitClauseAssignment_9.eContents().get(0);
		
		//SelectAllQuery returns SelectQuery:
		//	base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? all?="*"
		//	datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause?
		//	limitClause=LimitClause?;
		public ParserRule getRule() { return rule; }

		//base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? all?="*"
		//datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause?
		//limitClause=LimitClause?
		public Group getGroup() { return cGroup; }

		//base=Base?
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//Base
		public RuleCall getBaseBaseParserRuleCall_0_0() { return cBaseBaseParserRuleCall_0_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }

		//(isDistinct?="DISTINCT" | isReduced?="REDUCED")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//isDistinct?="DISTINCT"
		public Assignment getIsDistinctAssignment_3_0() { return cIsDistinctAssignment_3_0; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_3_0_0() { return cIsDistinctDISTINCTKeyword_3_0_0; }

		//isReduced?="REDUCED"
		public Assignment getIsReducedAssignment_3_1() { return cIsReducedAssignment_3_1; }

		//"REDUCED"
		public Keyword getIsReducedREDUCEDKeyword_3_1_0() { return cIsReducedREDUCEDKeyword_3_1_0; }

		//all?="*"
		public Assignment getAllAssignment_4() { return cAllAssignment_4; }

		//"*"
		public Keyword getAllAsteriskKeyword_4_0() { return cAllAsteriskKeyword_4_0; }

		//datasetClause+=DatasetClause*
		public Assignment getDatasetClauseAssignment_5() { return cDatasetClauseAssignment_5; }

		//DatasetClause
		public RuleCall getDatasetClauseDatasetClauseParserRuleCall_5_0() { return cDatasetClauseDatasetClauseParserRuleCall_5_0; }

		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_6() { return cWhereClauseAssignment_6; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_6_0() { return cWhereClauseWhereClauseParserRuleCall_6_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_7() { return cGroupClauseAssignment_7; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_7_0() { return cGroupClauseGroupClauseParserRuleCall_7_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_8() { return cHavingClauseAssignment_8; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_8_0() { return cHavingClauseHavingClauseParserRuleCall_8_0; }

		//limitClause=LimitClause?
		public Assignment getLimitClauseAssignment_9() { return cLimitClauseAssignment_9; }

		//LimitClause
		public RuleCall getLimitClauseLimitClauseParserRuleCall_9_0() { return cLimitClauseLimitClauseParserRuleCall_9_0; }
	}

	public class SelectVariablesQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectVariablesQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Keyword cSELECTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIsDistinctAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cIsDistinctDISTINCTKeyword_3_0_0 = (Keyword)cIsDistinctAssignment_3_0.eContents().get(0);
		private final Assignment cIsReducedAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cIsReducedREDUCEDKeyword_3_1_0 = (Keyword)cIsReducedAssignment_3_1.eContents().get(0);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Assignment cDatasetClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDatasetClauseDatasetClauseParserRuleCall_6_0 = (RuleCall)cDatasetClauseAssignment_6.eContents().get(0);
		private final Assignment cWhereClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_7_0 = (RuleCall)cWhereClauseAssignment_7.eContents().get(0);
		private final Assignment cGroupClauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_8_0 = (RuleCall)cGroupClauseAssignment_8.eContents().get(0);
		private final Assignment cHavingClauseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_9_0 = (RuleCall)cHavingClauseAssignment_9.eContents().get(0);
		private final Assignment cLimitClauseAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cLimitClauseLimitClauseParserRuleCall_10_0 = (RuleCall)cLimitClauseAssignment_10.eContents().get(0);
		
		//SelectVariablesQuery returns SelectQuery:
		//	base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? variables+=Variable
		//	variables+=Variable* datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
		//	havingClause=HavingClause? limitClause=LimitClause?;
		public ParserRule getRule() { return rule; }

		//base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? variables+=Variable
		//variables+=Variable* datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
		//havingClause=HavingClause? limitClause=LimitClause?
		public Group getGroup() { return cGroup; }

		//base=Base?
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//Base
		public RuleCall getBaseBaseParserRuleCall_0_0() { return cBaseBaseParserRuleCall_0_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }

		//(isDistinct?="DISTINCT" | isReduced?="REDUCED")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//isDistinct?="DISTINCT"
		public Assignment getIsDistinctAssignment_3_0() { return cIsDistinctAssignment_3_0; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_3_0_0() { return cIsDistinctDISTINCTKeyword_3_0_0; }

		//isReduced?="REDUCED"
		public Assignment getIsReducedAssignment_3_1() { return cIsReducedAssignment_3_1; }

		//"REDUCED"
		public Keyword getIsReducedREDUCEDKeyword_3_1_0() { return cIsReducedREDUCEDKeyword_3_1_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_0() { return cVariablesVariableParserRuleCall_4_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_5_0() { return cVariablesVariableParserRuleCall_5_0; }

		//datasetClause+=DatasetClause*
		public Assignment getDatasetClauseAssignment_6() { return cDatasetClauseAssignment_6; }

		//DatasetClause
		public RuleCall getDatasetClauseDatasetClauseParserRuleCall_6_0() { return cDatasetClauseDatasetClauseParserRuleCall_6_0; }

		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_7() { return cWhereClauseAssignment_7; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_7_0() { return cWhereClauseWhereClauseParserRuleCall_7_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_8() { return cGroupClauseAssignment_8; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_8_0() { return cGroupClauseGroupClauseParserRuleCall_8_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_9() { return cHavingClauseAssignment_9; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_9_0() { return cHavingClauseHavingClauseParserRuleCall_9_0; }

		//limitClause=LimitClause?
		public Assignment getLimitClauseAssignment_10() { return cLimitClauseAssignment_10; }

		//LimitClause
		public RuleCall getLimitClauseLimitClauseParserRuleCall_10_0() { return cLimitClauseLimitClauseParserRuleCall_10_0; }
	}

	public class AskQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AskQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Keyword cASKKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatasetClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatasetClauseDatasetClauseParserRuleCall_3_0 = (RuleCall)cDatasetClauseAssignment_3.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_4_0 = (RuleCall)cWhereClauseAssignment_4.eContents().get(0);
		private final Assignment cGroupClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_5_0 = (RuleCall)cGroupClauseAssignment_5.eContents().get(0);
		private final Assignment cHavingClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_6_0 = (RuleCall)cHavingClauseAssignment_6.eContents().get(0);
		private final Assignment cLimitClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLimitClauseLimitClauseParserRuleCall_7_0 = (RuleCall)cLimitClauseAssignment_7.eContents().get(0);
		
		//AskQuery:
		//	base=Base? prefixes+=Prefix* "ASK" datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
		//	havingClause=HavingClause? limitClause=LimitClause?;
		public ParserRule getRule() { return rule; }

		//base=Base? prefixes+=Prefix* "ASK" datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
		//havingClause=HavingClause? limitClause=LimitClause?
		public Group getGroup() { return cGroup; }

		//base=Base?
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//Base
		public RuleCall getBaseBaseParserRuleCall_0_0() { return cBaseBaseParserRuleCall_0_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//"ASK"
		public Keyword getASKKeyword_2() { return cASKKeyword_2; }

		//datasetClause+=DatasetClause*
		public Assignment getDatasetClauseAssignment_3() { return cDatasetClauseAssignment_3; }

		//DatasetClause
		public RuleCall getDatasetClauseDatasetClauseParserRuleCall_3_0() { return cDatasetClauseDatasetClauseParserRuleCall_3_0; }

		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_4() { return cWhereClauseAssignment_4; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_4_0() { return cWhereClauseWhereClauseParserRuleCall_4_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_5() { return cGroupClauseAssignment_5; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_5_0() { return cGroupClauseGroupClauseParserRuleCall_5_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_6() { return cHavingClauseAssignment_6; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_6_0() { return cHavingClauseHavingClauseParserRuleCall_6_0; }

		//limitClause=LimitClause?
		public Assignment getLimitClauseAssignment_7() { return cLimitClauseAssignment_7; }

		//LimitClause
		public RuleCall getLimitClauseLimitClauseParserRuleCall_7_0() { return cLimitClauseLimitClauseParserRuleCall_7_0; }
	}

	public class DescribeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescribeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Keyword cDESCRIBEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesGraphNodeParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesGraphNodeParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Assignment cDatasetClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDatasetClauseDatasetClauseParserRuleCall_5_0 = (RuleCall)cDatasetClauseAssignment_5.eContents().get(0);
		private final Assignment cWhereClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_6_0 = (RuleCall)cWhereClauseAssignment_6.eContents().get(0);
		private final Assignment cGroupClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_7_0 = (RuleCall)cGroupClauseAssignment_7.eContents().get(0);
		private final Assignment cHavingClauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_8_0 = (RuleCall)cHavingClauseAssignment_8.eContents().get(0);
		private final Assignment cLimitClauseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLimitClauseLimitClauseParserRuleCall_9_0 = (RuleCall)cLimitClauseAssignment_9.eContents().get(0);
		
		//DescribeQuery:
		//	base=Base? prefixes+=Prefix* "DESCRIBE" variables+=GraphNode variables+=GraphNode* datasetClause+=DatasetClause*
		//	whereClause=WhereClause? groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?;
		public ParserRule getRule() { return rule; }

		//base=Base? prefixes+=Prefix* "DESCRIBE" variables+=GraphNode variables+=GraphNode* datasetClause+=DatasetClause*
		//whereClause=WhereClause? groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?
		public Group getGroup() { return cGroup; }

		//base=Base?
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//Base
		public RuleCall getBaseBaseParserRuleCall_0_0() { return cBaseBaseParserRuleCall_0_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//"DESCRIBE"
		public Keyword getDESCRIBEKeyword_2() { return cDESCRIBEKeyword_2; }

		//variables+=GraphNode
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//GraphNode
		public RuleCall getVariablesGraphNodeParserRuleCall_3_0() { return cVariablesGraphNodeParserRuleCall_3_0; }

		//variables+=GraphNode*
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }

		//GraphNode
		public RuleCall getVariablesGraphNodeParserRuleCall_4_0() { return cVariablesGraphNodeParserRuleCall_4_0; }

		//datasetClause+=DatasetClause*
		public Assignment getDatasetClauseAssignment_5() { return cDatasetClauseAssignment_5; }

		//DatasetClause
		public RuleCall getDatasetClauseDatasetClauseParserRuleCall_5_0() { return cDatasetClauseDatasetClauseParserRuleCall_5_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_6() { return cWhereClauseAssignment_6; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_6_0() { return cWhereClauseWhereClauseParserRuleCall_6_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_7() { return cGroupClauseAssignment_7; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_7_0() { return cGroupClauseGroupClauseParserRuleCall_7_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_8() { return cHavingClauseAssignment_8; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_8_0() { return cHavingClauseHavingClauseParserRuleCall_8_0; }

		//limitClause=LimitClause?
		public Assignment getLimitClauseAssignment_9() { return cLimitClauseAssignment_9; }

		//LimitClause
		public RuleCall getLimitClauseLimitClauseParserRuleCall_9_0() { return cLimitClauseLimitClauseParserRuleCall_9_0; }
	}

	public class ConstructQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaseBaseParserRuleCall_0_0 = (RuleCall)cBaseAssignment_0.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Keyword cCONSTRUCTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstructTemplateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstructTemplateGroupGraphPatternParserRuleCall_3_0 = (RuleCall)cConstructTemplateAssignment_3.eContents().get(0);
		private final Assignment cDatasetClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDatasetClauseDatasetClauseParserRuleCall_4_0 = (RuleCall)cDatasetClauseAssignment_4.eContents().get(0);
		private final Assignment cWhereClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_5_0 = (RuleCall)cWhereClauseAssignment_5.eContents().get(0);
		private final Assignment cGroupClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_6_0 = (RuleCall)cGroupClauseAssignment_6.eContents().get(0);
		private final Assignment cHavingClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_7_0 = (RuleCall)cHavingClauseAssignment_7.eContents().get(0);
		private final Assignment cLimitClauseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLimitClauseLimitClauseParserRuleCall_8_0 = (RuleCall)cLimitClauseAssignment_8.eContents().get(0);
		
		//ConstructQuery:
		//	base=Base? prefixes+=Prefix* "CONSTRUCT" constructTemplate=GroupGraphPattern datasetClause+=DatasetClause*
		//	whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?;
		public ParserRule getRule() { return rule; }

		//base=Base? prefixes+=Prefix* "CONSTRUCT" constructTemplate=GroupGraphPattern datasetClause+=DatasetClause*
		//whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?
		public Group getGroup() { return cGroup; }

		//base=Base?
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//Base
		public RuleCall getBaseBaseParserRuleCall_0_0() { return cBaseBaseParserRuleCall_0_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//"CONSTRUCT"
		public Keyword getCONSTRUCTKeyword_2() { return cCONSTRUCTKeyword_2; }

		//constructTemplate=GroupGraphPattern
		public Assignment getConstructTemplateAssignment_3() { return cConstructTemplateAssignment_3; }

		//GroupGraphPattern
		public RuleCall getConstructTemplateGroupGraphPatternParserRuleCall_3_0() { return cConstructTemplateGroupGraphPatternParserRuleCall_3_0; }

		//datasetClause+=DatasetClause*
		public Assignment getDatasetClauseAssignment_4() { return cDatasetClauseAssignment_4; }

		//DatasetClause
		public RuleCall getDatasetClauseDatasetClauseParserRuleCall_4_0() { return cDatasetClauseDatasetClauseParserRuleCall_4_0; }

		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_5() { return cWhereClauseAssignment_5; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_5_0() { return cWhereClauseWhereClauseParserRuleCall_5_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_6() { return cGroupClauseAssignment_6; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_6_0() { return cGroupClauseGroupClauseParserRuleCall_6_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_7() { return cHavingClauseAssignment_7; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_7_0() { return cHavingClauseHavingClauseParserRuleCall_7_0; }

		//limitClause=LimitClause?
		public Assignment getLimitClauseAssignment_8() { return cLimitClauseAssignment_8; }

		//LimitClause
		public RuleCall getLimitClauseLimitClauseParserRuleCall_8_0() { return cLimitClauseLimitClauseParserRuleCall_8_0; }
	}

	public class UpdateQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixesPrefixParserRuleCall_1_0 = (RuleCall)cPrefixesAssignment_1.eContents().get(0);
		private final Assignment cOperationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsUpdateOperationParserRuleCall_2_0 = (RuleCall)cOperationsAssignment_2.eContents().get(0);
		
		//UpdateQuery:
		//	{UpdateQuery} prefixes+=Prefix* operations+=UpdateOperation+;
		public ParserRule getRule() { return rule; }

		//{UpdateQuery} prefixes+=Prefix* operations+=UpdateOperation+
		public Group getGroup() { return cGroup; }

		//{UpdateQuery}
		public Action getUpdateQueryAction_0() { return cUpdateQueryAction_0; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_1() { return cPrefixesAssignment_1; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_1_0() { return cPrefixesPrefixParserRuleCall_1_0; }

		//operations+=UpdateOperation+
		public Assignment getOperationsAssignment_2() { return cOperationsAssignment_2; }

		//UpdateOperation
		public RuleCall getOperationsUpdateOperationParserRuleCall_2_0() { return cOperationsUpdateOperationParserRuleCall_2_0; }
	}

	public class UpdateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModifyQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateGraphQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDropGraphQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLoadGraphQueryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClearGraphQueryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////DeleteInsertQuery:
		////	(prefixes+=Prefix)*
		////	operations+=DeleteInsert
		////;
		//UpdateOperation:
		//	ModifyQuery | CreateGraphQuery | DropGraphQuery | LoadGraphQuery | ClearGraphQuery;
		public ParserRule getRule() { return rule; }

		//ModifyQuery | CreateGraphQuery | DropGraphQuery | LoadGraphQuery | ClearGraphQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModifyQuery
		public RuleCall getModifyQueryParserRuleCall_0() { return cModifyQueryParserRuleCall_0; }

		//CreateGraphQuery
		public RuleCall getCreateGraphQueryParserRuleCall_1() { return cCreateGraphQueryParserRuleCall_1; }

		//DropGraphQuery
		public RuleCall getDropGraphQueryParserRuleCall_2() { return cDropGraphQueryParserRuleCall_2; }

		//LoadGraphQuery
		public RuleCall getLoadGraphQueryParserRuleCall_3() { return cLoadGraphQueryParserRuleCall_3; }

		//ClearGraphQuery
		public RuleCall getClearGraphQueryParserRuleCall_4() { return cClearGraphQueryParserRuleCall_4; }
	}

	public class ModifyQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cWITHKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cWithGraphAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cWithGraphIRI_TERMINALTerminalRuleCall_0_0_1_0 = (RuleCall)cWithGraphAssignment_0_0_1.eContents().get(0);
		private final Assignment cQueryAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cQueryInsertQueryParserRuleCall_0_1_0 = (RuleCall)cQueryAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cWITHKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cWithGraphAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cWithGraphIRI_TERMINALTerminalRuleCall_1_0_1_0 = (RuleCall)cWithGraphAssignment_1_0_1.eContents().get(0);
		private final Assignment cQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQueryInsertDataQueryParserRuleCall_1_1_0 = (RuleCall)cQueryAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cWITHKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cWithGraphAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cWithGraphIRI_TERMINALTerminalRuleCall_2_0_1_0 = (RuleCall)cWithGraphAssignment_2_0_1.eContents().get(0);
		private final Assignment cQueryAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQueryDeleteQueryParserRuleCall_2_1_0 = (RuleCall)cQueryAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cWITHKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cWithGraphAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cWithGraphIRI_TERMINALTerminalRuleCall_3_0_1_0 = (RuleCall)cWithGraphAssignment_3_0_1.eContents().get(0);
		private final Assignment cQueryAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQueryDeleteDataQueryParserRuleCall_3_1_0 = (RuleCall)cQueryAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cWITHKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cWithGraphAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cWithGraphIRI_TERMINALTerminalRuleCall_4_0_1_0 = (RuleCall)cWithGraphAssignment_4_0_1.eContents().get(0);
		private final Assignment cQueryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQueryDeleteWhereQueryParserRuleCall_4_1_0 = (RuleCall)cQueryAssignment_4_1.eContents().get(0);
		
		//ModifyQuery:
		//	("WITH" withGraph=IRI_TERMINAL)? query=InsertQuery | ("WITH" withGraph=IRI_TERMINAL)? query=InsertDataQuery | ("WITH"
		//	withGraph=IRI_TERMINAL)? query=DeleteQuery | ("WITH" withGraph=IRI_TERMINAL)? query=DeleteDataQuery | ("WITH"
		//	withGraph=IRI_TERMINAL)? query=DeleteWhereQuery;
		public ParserRule getRule() { return rule; }

		//("WITH" withGraph=IRI_TERMINAL)? query=InsertQuery | ("WITH" withGraph=IRI_TERMINAL)? query=InsertDataQuery | ("WITH"
		//withGraph=IRI_TERMINAL)? query=DeleteQuery | ("WITH" withGraph=IRI_TERMINAL)? query=DeleteDataQuery | ("WITH"
		//withGraph=IRI_TERMINAL)? query=DeleteWhereQuery
		public Alternatives getAlternatives() { return cAlternatives; }

		//("WITH" withGraph=IRI_TERMINAL)? query=InsertQuery
		public Group getGroup_0() { return cGroup_0; }

		//("WITH" withGraph=IRI_TERMINAL)?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"WITH"
		public Keyword getWITHKeyword_0_0_0() { return cWITHKeyword_0_0_0; }

		//withGraph=IRI_TERMINAL
		public Assignment getWithGraphAssignment_0_0_1() { return cWithGraphAssignment_0_0_1; }

		//IRI_TERMINAL
		public RuleCall getWithGraphIRI_TERMINALTerminalRuleCall_0_0_1_0() { return cWithGraphIRI_TERMINALTerminalRuleCall_0_0_1_0; }

		//query=InsertQuery
		public Assignment getQueryAssignment_0_1() { return cQueryAssignment_0_1; }

		//InsertQuery
		public RuleCall getQueryInsertQueryParserRuleCall_0_1_0() { return cQueryInsertQueryParserRuleCall_0_1_0; }

		//("WITH" withGraph=IRI_TERMINAL)? query=InsertDataQuery
		public Group getGroup_1() { return cGroup_1; }

		//("WITH" withGraph=IRI_TERMINAL)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"WITH"
		public Keyword getWITHKeyword_1_0_0() { return cWITHKeyword_1_0_0; }

		//withGraph=IRI_TERMINAL
		public Assignment getWithGraphAssignment_1_0_1() { return cWithGraphAssignment_1_0_1; }

		//IRI_TERMINAL
		public RuleCall getWithGraphIRI_TERMINALTerminalRuleCall_1_0_1_0() { return cWithGraphIRI_TERMINALTerminalRuleCall_1_0_1_0; }

		//query=InsertDataQuery
		public Assignment getQueryAssignment_1_1() { return cQueryAssignment_1_1; }

		//InsertDataQuery
		public RuleCall getQueryInsertDataQueryParserRuleCall_1_1_0() { return cQueryInsertDataQueryParserRuleCall_1_1_0; }

		//("WITH" withGraph=IRI_TERMINAL)? query=DeleteQuery
		public Group getGroup_2() { return cGroup_2; }

		//("WITH" withGraph=IRI_TERMINAL)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"WITH"
		public Keyword getWITHKeyword_2_0_0() { return cWITHKeyword_2_0_0; }

		//withGraph=IRI_TERMINAL
		public Assignment getWithGraphAssignment_2_0_1() { return cWithGraphAssignment_2_0_1; }

		//IRI_TERMINAL
		public RuleCall getWithGraphIRI_TERMINALTerminalRuleCall_2_0_1_0() { return cWithGraphIRI_TERMINALTerminalRuleCall_2_0_1_0; }

		//query=DeleteQuery
		public Assignment getQueryAssignment_2_1() { return cQueryAssignment_2_1; }

		//DeleteQuery
		public RuleCall getQueryDeleteQueryParserRuleCall_2_1_0() { return cQueryDeleteQueryParserRuleCall_2_1_0; }

		//("WITH" withGraph=IRI_TERMINAL)? query=DeleteDataQuery
		public Group getGroup_3() { return cGroup_3; }

		//("WITH" withGraph=IRI_TERMINAL)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"WITH"
		public Keyword getWITHKeyword_3_0_0() { return cWITHKeyword_3_0_0; }

		//withGraph=IRI_TERMINAL
		public Assignment getWithGraphAssignment_3_0_1() { return cWithGraphAssignment_3_0_1; }

		//IRI_TERMINAL
		public RuleCall getWithGraphIRI_TERMINALTerminalRuleCall_3_0_1_0() { return cWithGraphIRI_TERMINALTerminalRuleCall_3_0_1_0; }

		//query=DeleteDataQuery
		public Assignment getQueryAssignment_3_1() { return cQueryAssignment_3_1; }

		//DeleteDataQuery
		public RuleCall getQueryDeleteDataQueryParserRuleCall_3_1_0() { return cQueryDeleteDataQueryParserRuleCall_3_1_0; }

		//("WITH" withGraph=IRI_TERMINAL)? query=DeleteWhereQuery
		public Group getGroup_4() { return cGroup_4; }

		//("WITH" withGraph=IRI_TERMINAL)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"WITH"
		public Keyword getWITHKeyword_4_0_0() { return cWITHKeyword_4_0_0; }

		//withGraph=IRI_TERMINAL
		public Assignment getWithGraphAssignment_4_0_1() { return cWithGraphAssignment_4_0_1; }

		//IRI_TERMINAL
		public RuleCall getWithGraphIRI_TERMINALTerminalRuleCall_4_0_1_0() { return cWithGraphIRI_TERMINALTerminalRuleCall_4_0_1_0; }

		//query=DeleteWhereQuery
		public Assignment getQueryAssignment_4_1() { return cQueryAssignment_4_1; }

		//DeleteWhereQuery
		public RuleCall getQueryDeleteWhereQueryParserRuleCall_4_1_0() { return cQueryDeleteWhereQueryParserRuleCall_4_1_0; }
	}

	public class CreateGraphQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateGraphQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsSilentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsSilentSILENTKeyword_1_0 = (Keyword)cIsSilentAssignment_1.eContents().get(0);
		private final Keyword cGRAPHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGraphAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_3_0 = (RuleCall)cGraphAssignment_3.eContents().get(0);
		
		//CreateGraphQuery:
		//	"CREATE" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//"CREATE" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL
		public Group getGroup() { return cGroup; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		//isSilent="SILENT"?
		public Assignment getIsSilentAssignment_1() { return cIsSilentAssignment_1; }

		//"SILENT"
		public Keyword getIsSilentSILENTKeyword_1_0() { return cIsSilentSILENTKeyword_1_0; }

		//"GRAPH"
		public Keyword getGRAPHKeyword_2() { return cGRAPHKeyword_2; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_3() { return cGraphAssignment_3; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_3_0() { return cGraphIRI_TERMINALTerminalRuleCall_3_0; }
	}

	public class DropGraphQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DropGraphQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsSilentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsSilentSILENTKeyword_1_0 = (Keyword)cIsSilentAssignment_1.eContents().get(0);
		private final Keyword cGRAPHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGraphAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_3_0 = (RuleCall)cGraphAssignment_3.eContents().get(0);
		
		//DropGraphQuery:
		//	"DROP" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//"DROP" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL
		public Group getGroup() { return cGroup; }

		//"DROP"
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }

		//isSilent="SILENT"?
		public Assignment getIsSilentAssignment_1() { return cIsSilentAssignment_1; }

		//"SILENT"
		public Keyword getIsSilentSILENTKeyword_1_0() { return cIsSilentSILENTKeyword_1_0; }

		//"GRAPH"
		public Keyword getGRAPHKeyword_2() { return cGRAPHKeyword_2; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_3() { return cGraphAssignment_3; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_3_0() { return cGraphIRI_TERMINALTerminalRuleCall_3_0; }
	}

	public class LoadGraphQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadGraphQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOADKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGraphAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_1_0 = (RuleCall)cGraphAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cINTOKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cGRAPHKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIntoGraphAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIntoGraphIRI_TERMINALTerminalRuleCall_2_2_0 = (RuleCall)cIntoGraphAssignment_2_2.eContents().get(0);
		
		//LoadGraphQuery:
		//	"LOAD" graph=IRI_TERMINAL ("INTO" "GRAPH" intoGraph=IRI_TERMINAL)?;
		public ParserRule getRule() { return rule; }

		//"LOAD" graph=IRI_TERMINAL ("INTO" "GRAPH" intoGraph=IRI_TERMINAL)?
		public Group getGroup() { return cGroup; }

		//"LOAD"
		public Keyword getLOADKeyword_0() { return cLOADKeyword_0; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_1() { return cGraphAssignment_1; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_1_0() { return cGraphIRI_TERMINALTerminalRuleCall_1_0; }

		//("INTO" "GRAPH" intoGraph=IRI_TERMINAL)?
		public Group getGroup_2() { return cGroup_2; }

		//"INTO"
		public Keyword getINTOKeyword_2_0() { return cINTOKeyword_2_0; }

		//"GRAPH"
		public Keyword getGRAPHKeyword_2_1() { return cGRAPHKeyword_2_1; }

		//intoGraph=IRI_TERMINAL
		public Assignment getIntoGraphAssignment_2_2() { return cIntoGraphAssignment_2_2; }

		//IRI_TERMINAL
		public RuleCall getIntoGraphIRI_TERMINALTerminalRuleCall_2_2_0() { return cIntoGraphIRI_TERMINALTerminalRuleCall_2_2_0; }
	}

	public class ClearGraphQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClearGraphQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLEARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGRAPHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUriAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_2_0_0 = (RuleCall)cUriAssignment_2_0.eContents().get(0);
		private final Assignment cIsDefaultAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsDefaultDEFAULTKeyword_2_1_0 = (Keyword)cIsDefaultAssignment_2_1.eContents().get(0);
		
		//ClearGraphQuery:
		//	"CLEAR" "GRAPH" (uri=IRI_TERMINAL | isDefault?="DEFAULT");
		public ParserRule getRule() { return rule; }

		//"CLEAR" "GRAPH" (uri=IRI_TERMINAL | isDefault?="DEFAULT")
		public Group getGroup() { return cGroup; }

		//"CLEAR"
		public Keyword getCLEARKeyword_0() { return cCLEARKeyword_0; }

		//"GRAPH"
		public Keyword getGRAPHKeyword_1() { return cGRAPHKeyword_1; }

		//uri=IRI_TERMINAL | isDefault?="DEFAULT"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_2_0() { return cUriAssignment_2_0; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_2_0_0() { return cUriIRI_TERMINALTerminalRuleCall_2_0_0; }

		//isDefault?="DEFAULT"
		public Assignment getIsDefaultAssignment_2_1() { return cIsDefaultAssignment_2_1; }

		//"DEFAULT"
		public Keyword getIsDefaultDEFAULTKeyword_2_1_0() { return cIsDefaultDEFAULTKeyword_2_1_0; }
	}

	public class UsingGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsingGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNamedNAMEDKeyword_1_0 = (Keyword)cNamedAssignment_1.eContents().get(0);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		
		////DeleteInsert:
		////	('WITH' withGraph=IRI_TERMINAL)?
		////	'DELETE' deletePattern=GroupGraphPattern
		////	'INSERT' insertPattern=GroupGraphPattern
		////	(usingGraphs+=UsingGraph)*
		////	(whereClause=WhereClause)?
		////;
		//UsingGraph:
		//	"USING" named?="NAMED"? uri=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//"USING" named?="NAMED"? uri=IRI_TERMINAL
		public Group getGroup() { return cGroup; }

		//"USING"
		public Keyword getUSINGKeyword_0() { return cUSINGKeyword_0; }

		//named?="NAMED"?
		public Assignment getNamedAssignment_1() { return cNamedAssignment_1; }

		//"NAMED"
		public Keyword getNamedNAMEDKeyword_1_0() { return cNamedNAMEDKeyword_1_0; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_2_0() { return cUriIRI_TERMINALTerminalRuleCall_2_0; }
	}

	public class InsertQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cINTOKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGraphAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_1_1_0 = (RuleCall)cGraphAssignment_1_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cWhereClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_3_0 = (RuleCall)cWhereClauseAssignment_3.eContents().get(0);
		
		//InsertQuery:
		//	"INSERT" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern //	(usingGraphs+=UsingGraph)*
		//	whereClause=WhereClause?;
		public ParserRule getRule() { return rule; }

		//"INSERT" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern //	(usingGraphs+=UsingGraph)*
		//whereClause=WhereClause?
		public Group getGroup() { return cGroup; }

		//"INSERT"
		public Keyword getINSERTKeyword_0() { return cINSERTKeyword_0; }

		//("INTO" graph=IRI_TERMINAL)?
		public Group getGroup_1() { return cGroup_1; }

		//"INTO"
		public Keyword getINTOKeyword_1_0() { return cINTOKeyword_1_0; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_1_1() { return cGraphAssignment_1_1; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_1_1_0() { return cGraphIRI_TERMINALTerminalRuleCall_1_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_2_0() { return cPatternGroupGraphPatternParserRuleCall_2_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_3() { return cWhereClauseAssignment_3; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_3_0() { return cWhereClauseWhereClauseParserRuleCall_3_0; }
	}

	public class InsertDataQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertDataQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDATAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cINTOKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGraphAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_2_1_0 = (RuleCall)cGraphAssignment_2_1.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//InsertDataQuery:
		//	"INSERT" "DATA" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"INSERT" "DATA" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"INSERT"
		public Keyword getINSERTKeyword_0() { return cINSERTKeyword_0; }

		//"DATA"
		public Keyword getDATAKeyword_1() { return cDATAKeyword_1; }

		//("INTO" graph=IRI_TERMINAL)?
		public Group getGroup_2() { return cGroup_2; }

		//"INTO"
		public Keyword getINTOKeyword_2_0() { return cINTOKeyword_2_0; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_2_1() { return cGraphAssignment_2_1; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_2_1_0() { return cGraphIRI_TERMINALTerminalRuleCall_2_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_3_0() { return cPatternGroupGraphPatternParserRuleCall_3_0; }
	}

	public class DeleteQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFROMKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGraphAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_1_1_0 = (RuleCall)cGraphAssignment_1_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cINSERTKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInsertPatternAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInsertPatternGroupGraphPatternParserRuleCall_3_1_0 = (RuleCall)cInsertPatternAssignment_3_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_4_0 = (RuleCall)cWhereClauseAssignment_4.eContents().get(0);
		
		//DeleteQuery:
		//	"DELETE" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern ("INSERT" insertPattern=GroupGraphPattern)? //	(usingGraphs+=UsingGraph)*
		//	whereClause=WhereClause?;
		public ParserRule getRule() { return rule; }

		//"DELETE" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern ("INSERT" insertPattern=GroupGraphPattern)? //	(usingGraphs+=UsingGraph)*
		//whereClause=WhereClause?
		public Group getGroup() { return cGroup; }

		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }

		//("FROM" graph=IRI_TERMINAL)?
		public Group getGroup_1() { return cGroup_1; }

		//"FROM"
		public Keyword getFROMKeyword_1_0() { return cFROMKeyword_1_0; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_1_1() { return cGraphAssignment_1_1; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_1_1_0() { return cGraphIRI_TERMINALTerminalRuleCall_1_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_2_0() { return cPatternGroupGraphPatternParserRuleCall_2_0; }

		//("INSERT" insertPattern=GroupGraphPattern)?
		public Group getGroup_3() { return cGroup_3; }

		//"INSERT"
		public Keyword getINSERTKeyword_3_0() { return cINSERTKeyword_3_0; }

		//insertPattern=GroupGraphPattern
		public Assignment getInsertPatternAssignment_3_1() { return cInsertPatternAssignment_3_1; }

		//GroupGraphPattern
		public RuleCall getInsertPatternGroupGraphPatternParserRuleCall_3_1_0() { return cInsertPatternGroupGraphPatternParserRuleCall_3_1_0; }

		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_4() { return cWhereClauseAssignment_4; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_4_0() { return cWhereClauseWhereClauseParserRuleCall_4_0; }
	}

	public class DeleteDataQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteDataQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDATAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFROMKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGraphAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGraphIRI_TERMINALTerminalRuleCall_2_1_0 = (RuleCall)cGraphAssignment_2_1.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//DeleteDataQuery:
		//	"DELETE" "DATA" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"DELETE" "DATA" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }

		//"DATA"
		public Keyword getDATAKeyword_1() { return cDATAKeyword_1; }

		//("FROM" graph=IRI_TERMINAL)?
		public Group getGroup_2() { return cGroup_2; }

		//"FROM"
		public Keyword getFROMKeyword_2_0() { return cFROMKeyword_2_0; }

		//graph=IRI_TERMINAL
		public Assignment getGraphAssignment_2_1() { return cGraphAssignment_2_1; }

		//IRI_TERMINAL
		public RuleCall getGraphIRI_TERMINALTerminalRuleCall_2_1_0() { return cGraphIRI_TERMINALTerminalRuleCall_2_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_3_0() { return cPatternGroupGraphPatternParserRuleCall_3_0; }
	}

	public class DeleteWhereQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteWhereQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWHEREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteWhereQuery:
		//	"DELETE" "WHERE" "{" pattern=GroupGraphPattern "}";
		public ParserRule getRule() { return rule; }

		//"DELETE" "WHERE" "{" pattern=GroupGraphPattern "}"
		public Group getGroup() { return cGroup; }

		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }

		//"WHERE"
		public Keyword getWHEREKeyword_1() { return cWHEREKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_3_0() { return cPatternGroupGraphPatternParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DatasetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatasetClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultDataSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedDataSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cServiceDataSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DatasetClause:
		//	DefaultDataSet | NamedDataSet | ServiceDataSet;
		public ParserRule getRule() { return rule; }

		//DefaultDataSet | NamedDataSet | ServiceDataSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefaultDataSet
		public RuleCall getDefaultDataSetParserRuleCall_0() { return cDefaultDataSetParserRuleCall_0; }

		//NamedDataSet
		public RuleCall getNamedDataSetParserRuleCall_1() { return cNamedDataSetParserRuleCall_1; }

		//ServiceDataSet
		public RuleCall getServiceDataSetParserRuleCall_2() { return cServiceDataSetParserRuleCall_2; }
	}

	public class DefaultDataSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultDataSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataSetIRIParserRuleCall_1_0 = (RuleCall)cDataSetAssignment_1.eContents().get(0);
		
		//DefaultDataSet:
		//	"FROM" dataSet=IRI;
		public ParserRule getRule() { return rule; }

		//"FROM" dataSet=IRI
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//dataSet=IRI
		public Assignment getDataSetAssignment_1() { return cDataSetAssignment_1; }

		//IRI
		public RuleCall getDataSetIRIParserRuleCall_1_0() { return cDataSetIRIParserRuleCall_1_0; }
	}

	public class NamedDataSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedDataSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNAMEDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataSetIRIParserRuleCall_2_0 = (RuleCall)cDataSetAssignment_2.eContents().get(0);
		
		//NamedDataSet:
		//	"FROM" "NAMED" dataSet=IRI;
		public ParserRule getRule() { return rule; }

		//"FROM" "NAMED" dataSet=IRI
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//"NAMED"
		public Keyword getNAMEDKeyword_1() { return cNAMEDKeyword_1; }

		//dataSet=IRI
		public Assignment getDataSetAssignment_2() { return cDataSetAssignment_2; }

		//IRI
		public RuleCall getDataSetIRIParserRuleCall_2_0() { return cDataSetIRIParserRuleCall_2_0; }
	}

	public class ServiceDataSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceDataSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSERVICEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataSetIRIParserRuleCall_2_0 = (RuleCall)cDataSetAssignment_2.eContents().get(0);
		
		//ServiceDataSet:
		//	"FROM" "SERVICE" dataSet=IRI;
		public ParserRule getRule() { return rule; }

		//"FROM" "SERVICE" dataSet=IRI
		public Group getGroup() { return cGroup; }

		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }

		//"SERVICE"
		public Keyword getSERVICEKeyword_1() { return cSERVICEKeyword_1; }

		//dataSet=IRI
		public Assignment getDataSetAssignment_2() { return cDataSetAssignment_2; }

		//IRI
		public RuleCall getDataSetIRIParserRuleCall_2_0() { return cDataSetIRIParserRuleCall_2_0; }
	}

	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupGraphPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupGraphPatternGroupGraphPatternParserRuleCall_1_0 = (RuleCall)cGroupGraphPatternAssignment_1.eContents().get(0);
		
		//WhereClause:
		//	"WHERE" groupGraphPattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"WHERE" groupGraphPattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"WHERE"
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }

		//groupGraphPattern=GroupGraphPattern
		public Assignment getGroupGraphPatternAssignment_1() { return cGroupGraphPatternAssignment_1; }

		//GroupGraphPattern
		public RuleCall getGroupGraphPatternGroupGraphPatternParserRuleCall_1_0() { return cGroupGraphPatternGroupGraphPatternParserRuleCall_1_0; }
	}

	public class GroupClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionGroupConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//GroupClause:
		//	"GROUP" "BY" condition=GroupCondition;
		public ParserRule getRule() { return rule; }

		//"GROUP" "BY" condition=GroupCondition
		public Group getGroup() { return cGroup; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//condition=GroupCondition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//GroupCondition
		public RuleCall getConditionGroupConditionParserRuleCall_2_0() { return cConditionGroupConditionParserRuleCall_2_0; }
	}

	public class GroupConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuiltInCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GroupCondition:
		//	BuiltInCall | Function | Variable;
		public ParserRule getRule() { return rule; }

		//BuiltInCall | Function | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//BuiltInCall
		public RuleCall getBuiltInCallParserRuleCall_0() { return cBuiltInCallParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }

		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}

	public class HavingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HavingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAVINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		//HavingClause:
		//	"HAVING" constraint=Constraint;
		public ParserRule getRule() { return rule; }

		//"HAVING" constraint=Constraint
		public Group getGroup() { return cGroup; }

		//"HAVING"
		public Keyword getHAVINGKeyword_0() { return cHAVINGKeyword_0; }

		//constraint=Constraint
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_1_0() { return cConstraintConstraintParserRuleCall_1_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParFilterExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltInCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constraint:
		//	ParFilterExpression | BuiltInCall | Function;
		public ParserRule getRule() { return rule; }

		//ParFilterExpression | BuiltInCall | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParFilterExpression
		public RuleCall getParFilterExpressionParserRuleCall_0() { return cParFilterExpressionParserRuleCall_0; }

		//BuiltInCall
		public RuleCall getBuiltInCallParserRuleCall_1() { return cBuiltInCallParserRuleCall_1; }

		//Function
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }
	}

	public class LimitClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLIMITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitINTTerminalRuleCall_1_0 = (RuleCall)cLimitAssignment_1.eContents().get(0);
		
		//LimitClause:
		//	"LIMIT" limit=INT;
		public ParserRule getRule() { return rule; }

		//"LIMIT" limit=INT
		public Group getGroup() { return cGroup; }

		//"LIMIT"
		public Keyword getLIMITKeyword_0() { return cLIMITKeyword_0; }

		//limit=INT
		public Assignment getLimitAssignment_1() { return cLimitAssignment_1; }

		//INT
		public RuleCall getLimitINTTerminalRuleCall_1_0() { return cLimitINTTerminalRuleCall_1_0; }
	}

	public class GroupGraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupGraphPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubSelectQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupGraphPatternSubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GroupGraphPattern:
		//	SubSelectQuery | GroupGraphPatternSub;
		public ParserRule getRule() { return rule; }

		//SubSelectQuery | GroupGraphPatternSub
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubSelectQuery
		public RuleCall getSubSelectQueryParserRuleCall_0() { return cSubSelectQueryParserRuleCall_0; }

		//GroupGraphPatternSub
		public RuleCall getGroupGraphPatternSubParserRuleCall_1() { return cGroupGraphPatternSubParserRuleCall_1; }
	}

	public class SubSelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSELECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_4_0 = (RuleCall)cWhereClauseAssignment_4.eContents().get(0);
		private final Assignment cGroupClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupClauseGroupClauseParserRuleCall_5_0 = (RuleCall)cGroupClauseAssignment_5.eContents().get(0);
		private final Assignment cHavingClauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHavingClauseHavingClauseParserRuleCall_6_0 = (RuleCall)cHavingClauseAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SubSelectQuery:
		//	"{" "SELECT" variables+=Variable variables+=Variable* whereClause=WhereClause groupClause=GroupClause?
		//	havingClause=HavingClause? "}";
		public ParserRule getRule() { return rule; }

		//"{" "SELECT" variables+=Variable variables+=Variable* whereClause=WhereClause groupClause=GroupClause?
		//havingClause=HavingClause? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"SELECT"
		public Keyword getSELECTKeyword_1() { return cSELECTKeyword_1; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0() { return cVariablesVariableParserRuleCall_3_0; }

		//whereClause=WhereClause
		public Assignment getWhereClauseAssignment_4() { return cWhereClauseAssignment_4; }

		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_4_0() { return cWhereClauseWhereClauseParserRuleCall_4_0; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_5() { return cGroupClauseAssignment_5; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseParserRuleCall_5_0() { return cGroupClauseGroupClauseParserRuleCall_5_0; }

		//havingClause=HavingClause?
		public Assignment getHavingClauseAssignment_6() { return cHavingClauseAssignment_6; }

		//HavingClause
		public RuleCall getHavingClauseHavingClauseParserRuleCall_6_0() { return cHavingClauseHavingClauseParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GroupGraphPatternSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupGraphPatternSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGraphPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGraphPatternsGraphPatternParserRuleCall_1_0 = (RuleCall)cGraphPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGraphPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGraphPatternsGraphPatternParserRuleCall_2_1_0 = (RuleCall)cGraphPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GroupGraphPatternSub:
		//	"{" graphPatterns+=GraphPattern ("." graphPatterns+=GraphPattern)* "."? "}";
		public ParserRule getRule() { return rule; }

		//"{" graphPatterns+=GraphPattern ("." graphPatterns+=GraphPattern)* "."? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//graphPatterns+=GraphPattern
		public Assignment getGraphPatternsAssignment_1() { return cGraphPatternsAssignment_1; }

		//GraphPattern
		public RuleCall getGraphPatternsGraphPatternParserRuleCall_1_0() { return cGraphPatternsGraphPatternParserRuleCall_1_0; }

		//("." graphPatterns+=GraphPattern)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//graphPatterns+=GraphPattern
		public Assignment getGraphPatternsAssignment_2_1() { return cGraphPatternsAssignment_2_1; }

		//GraphPattern
		public RuleCall getGraphPatternsGraphPatternParserRuleCall_2_1_0() { return cGraphPatternsGraphPatternParserRuleCall_2_1_0; }

		//"."?
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTriplesSameSubjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupOrUnionGraphPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOptionalGraphPatternParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGraphGraphPatternParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cServiceGraphPatternParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFilterPatternParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExistsPatternParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotExistsPatternParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMinusPatternParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//GraphPattern:
		//	TriplesSameSubject | GroupOrUnionGraphPattern | OptionalGraphPattern | GraphGraphPattern | ServiceGraphPattern |
		//	FilterPattern | ExistsPattern | NotExistsPattern | MinusPattern;
		public ParserRule getRule() { return rule; }

		//TriplesSameSubject | GroupOrUnionGraphPattern | OptionalGraphPattern | GraphGraphPattern | ServiceGraphPattern |
		//FilterPattern | ExistsPattern | NotExistsPattern | MinusPattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//TriplesSameSubject
		public RuleCall getTriplesSameSubjectParserRuleCall_0() { return cTriplesSameSubjectParserRuleCall_0; }

		//GroupOrUnionGraphPattern
		public RuleCall getGroupOrUnionGraphPatternParserRuleCall_1() { return cGroupOrUnionGraphPatternParserRuleCall_1; }

		//OptionalGraphPattern
		public RuleCall getOptionalGraphPatternParserRuleCall_2() { return cOptionalGraphPatternParserRuleCall_2; }

		//GraphGraphPattern
		public RuleCall getGraphGraphPatternParserRuleCall_3() { return cGraphGraphPatternParserRuleCall_3; }

		//ServiceGraphPattern
		public RuleCall getServiceGraphPatternParserRuleCall_4() { return cServiceGraphPatternParserRuleCall_4; }

		//FilterPattern
		public RuleCall getFilterPatternParserRuleCall_5() { return cFilterPatternParserRuleCall_5; }

		//ExistsPattern
		public RuleCall getExistsPatternParserRuleCall_6() { return cExistsPatternParserRuleCall_6; }

		//NotExistsPattern
		public RuleCall getNotExistsPatternParserRuleCall_7() { return cNotExistsPatternParserRuleCall_7; }

		//MinusPattern
		public RuleCall getMinusPatternParserRuleCall_8() { return cMinusPatternParserRuleCall_8; }
	}

	public class TriplesSameSubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriplesSameSubject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectGraphNodeParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Assignment cPropertyListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyListPropertyListParserRuleCall_1_0 = (RuleCall)cPropertyListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyListPropertyListParserRuleCall_2_1_0 = (RuleCall)cPropertyListAssignment_2_1.eContents().get(0);
		
		//TriplesSameSubject:
		//	subject=GraphNode propertyList+=PropertyList (";" propertyList+=PropertyList)*;
		public ParserRule getRule() { return rule; }

		//subject=GraphNode propertyList+=PropertyList (";" propertyList+=PropertyList)*
		public Group getGroup() { return cGroup; }

		//subject=GraphNode
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }

		//GraphNode
		public RuleCall getSubjectGraphNodeParserRuleCall_0_0() { return cSubjectGraphNodeParserRuleCall_0_0; }

		//propertyList+=PropertyList
		public Assignment getPropertyListAssignment_1() { return cPropertyListAssignment_1; }

		//PropertyList
		public RuleCall getPropertyListPropertyListParserRuleCall_1_0() { return cPropertyListPropertyListParserRuleCall_1_0; }

		//(";" propertyList+=PropertyList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//propertyList+=PropertyList
		public Assignment getPropertyListAssignment_2_1() { return cPropertyListAssignment_2_1; }

		//PropertyList
		public RuleCall getPropertyListPropertyListParserRuleCall_2_1_0() { return cPropertyListPropertyListParserRuleCall_2_1_0; }
	}

	public class GroupOrUnionGraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupOrUnionGraphPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGraphPatternsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGraphPatternsGroupGraphPatternParserRuleCall_0_0 = (RuleCall)cGraphPatternsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUNIONKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGraphPatternsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGraphPatternsGroupGraphPatternParserRuleCall_1_1_0 = (RuleCall)cGraphPatternsAssignment_1_1.eContents().get(0);
		
		//GroupOrUnionGraphPattern:
		//	graphPatterns+=GroupGraphPattern ("UNION" graphPatterns+=GroupGraphPattern)?;
		public ParserRule getRule() { return rule; }

		//graphPatterns+=GroupGraphPattern ("UNION" graphPatterns+=GroupGraphPattern)?
		public Group getGroup() { return cGroup; }

		//graphPatterns+=GroupGraphPattern
		public Assignment getGraphPatternsAssignment_0() { return cGraphPatternsAssignment_0; }

		//GroupGraphPattern
		public RuleCall getGraphPatternsGroupGraphPatternParserRuleCall_0_0() { return cGraphPatternsGroupGraphPatternParserRuleCall_0_0; }

		//("UNION" graphPatterns+=GroupGraphPattern)?
		public Group getGroup_1() { return cGroup_1; }

		//"UNION"
		public Keyword getUNIONKeyword_1_0() { return cUNIONKeyword_1_0; }

		//graphPatterns+=GroupGraphPattern
		public Assignment getGraphPatternsAssignment_1_1() { return cGraphPatternsAssignment_1_1; }

		//GroupGraphPattern
		public RuleCall getGraphPatternsGroupGraphPatternParserRuleCall_1_1_0() { return cGraphPatternsGroupGraphPatternParserRuleCall_1_1_0; }
	}

	public class OptionalGraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalGraphPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOPTIONALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGraphPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGraphPatternGroupGraphPatternParserRuleCall_1_0 = (RuleCall)cGraphPatternAssignment_1.eContents().get(0);
		
		//OptionalGraphPattern:
		//	"OPTIONAL" graphPattern+=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"OPTIONAL" graphPattern+=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"OPTIONAL"
		public Keyword getOPTIONALKeyword_0() { return cOPTIONALKeyword_0; }

		//graphPattern+=GroupGraphPattern
		public Assignment getGraphPatternAssignment_1() { return cGraphPatternAssignment_1; }

		//GroupGraphPattern
		public RuleCall getGraphPatternGroupGraphPatternParserRuleCall_1_0() { return cGraphPatternGroupGraphPatternParserRuleCall_1_0; }
	}

	public class PropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyGraphNodeParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectGraphNodeParserRuleCall_1_0 = (RuleCall)cObjectAssignment_1.eContents().get(0);
		
		//PropertyList:
		//	property=GraphNode object=GraphNode;
		public ParserRule getRule() { return rule; }

		//property=GraphNode object=GraphNode
		public Group getGroup() { return cGroup; }

		//property=GraphNode
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//GraphNode
		public RuleCall getPropertyGraphNodeParserRuleCall_0_0() { return cPropertyGraphNodeParserRuleCall_0_0; }

		//object=GraphNode
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }

		//GraphNode
		public RuleCall getObjectGraphNodeParserRuleCall_1_0() { return cObjectGraphNodeParserRuleCall_1_0; }
	}

	public class GraphGraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphGraphPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGRAPHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarGraphNodeParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//GraphGraphPattern:
		//	"GRAPH" var=GraphNode pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"GRAPH" var=GraphNode pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"GRAPH"
		public Keyword getGRAPHKeyword_0() { return cGRAPHKeyword_0; }

		//var=GraphNode
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//GraphNode
		public RuleCall getVarGraphNodeParserRuleCall_1_0() { return cVarGraphNodeParserRuleCall_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_2_0() { return cPatternGroupGraphPatternParserRuleCall_2_0; }
	}

	public class ServiceGraphPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceGraphPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSERVICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarGraphNodeParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//ServiceGraphPattern:
		//	"SERVICE" var=GraphNode pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"SERVICE" var=GraphNode pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"SERVICE"
		public Keyword getSERVICEKeyword_0() { return cSERVICEKeyword_0; }

		//var=GraphNode
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//GraphNode
		public RuleCall getVarGraphNodeParserRuleCall_1_0() { return cVarGraphNodeParserRuleCall_1_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_2_0() { return cPatternGroupGraphPatternParserRuleCall_2_0; }
	}

	public class FilterPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FilterPattern:
		//	"FILTER" "(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"FILTER" "(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"FILTER"
		public Keyword getFILTERKeyword_0() { return cFILTERKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExistsPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEXISTSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//ExistsPattern:
		//	"FILTER" "EXISTS" pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"FILTER" "EXISTS" pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"FILTER"
		public Keyword getFILTERKeyword_0() { return cFILTERKeyword_0; }

		//"EXISTS"
		public Keyword getEXISTSKeyword_1() { return cEXISTSKeyword_1; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_2_0() { return cPatternGroupGraphPatternParserRuleCall_2_0; }
	}

	public class NotExistsPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotExistsPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEXISTSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//NotExistsPattern:
		//	"FILTER" "NOT" "EXISTS" pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"FILTER" "NOT" "EXISTS" pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"FILTER"
		public Keyword getFILTERKeyword_0() { return cFILTERKeyword_0; }

		//"NOT"
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }

		//"EXISTS"
		public Keyword getEXISTSKeyword_2() { return cEXISTSKeyword_2; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_3_0() { return cPatternGroupGraphPatternParserRuleCall_3_0; }
	}

	public class MinusPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinusPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMINUSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternGroupGraphPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//MinusPattern:
		//	"MINUS" pattern=GroupGraphPattern;
		public ParserRule getRule() { return rule; }

		//"MINUS" pattern=GroupGraphPattern
		public Group getGroup() { return cGroup; }

		//"MINUS"
		public Keyword getMINUSKeyword_0() { return cMINUSKeyword_0; }

		//pattern=GroupGraphPattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//GroupGraphPattern
		public RuleCall getPatternGroupGraphPatternParserRuleCall_1_0() { return cPatternGroupGraphPatternParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndFilterExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrFilterExpressionEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndFilterExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Expression:
		//	AndFilterExpression ({OrFilterExpression.entries+=current} ("||" entries+=AndFilterExpression)+)?;
		public ParserRule getRule() { return rule; }

		//AndFilterExpression ({OrFilterExpression.entries+=current} ("||" entries+=AndFilterExpression)+)?
		public Group getGroup() { return cGroup; }

		//AndFilterExpression
		public RuleCall getAndFilterExpressionParserRuleCall_0() { return cAndFilterExpressionParserRuleCall_0; }

		//({OrFilterExpression.entries+=current} ("||" entries+=AndFilterExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrFilterExpression.entries+=current}
		public Action getOrFilterExpressionEntriesAction_1_0() { return cOrFilterExpressionEntriesAction_1_0; }

		//("||" entries+=AndFilterExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }

		//entries+=AndFilterExpression
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndFilterExpression
		public RuleCall getEntriesAndFilterExpressionParserRuleCall_1_1_1_0() { return cEntriesAndFilterExpressionParserRuleCall_1_1_1_0; }
	}

	public class AndFilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndFilterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcreteFilterExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndFilterExpressionEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesConcreteFilterExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndFilterExpression returns Expression:
		//	ConcreteFilterExpression ({AndFilterExpression.entries+=current} ("&&" entries+=ConcreteFilterExpression)+)?;
		public ParserRule getRule() { return rule; }

		//ConcreteFilterExpression ({AndFilterExpression.entries+=current} ("&&" entries+=ConcreteFilterExpression)+)?
		public Group getGroup() { return cGroup; }

		//ConcreteFilterExpression
		public RuleCall getConcreteFilterExpressionParserRuleCall_0() { return cConcreteFilterExpressionParserRuleCall_0; }

		//({AndFilterExpression.entries+=current} ("&&" entries+=ConcreteFilterExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndFilterExpression.entries+=current}
		public Action getAndFilterExpressionEntriesAction_1_0() { return cAndFilterExpressionEntriesAction_1_0; }

		//("&&" entries+=ConcreteFilterExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1_0() { return cAmpersandAmpersandKeyword_1_1_0; }

		//entries+=ConcreteFilterExpression
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ConcreteFilterExpression
		public RuleCall getEntriesConcreteFilterExpressionParserRuleCall_1_1_1_0() { return cEntriesConcreteFilterExpressionParserRuleCall_1_1_1_0; }
	}

	public class ConcreteFilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteFilterExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParFilterExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionFilterExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteFilterExpression returns Expression:
		//	ParFilterExpression | ExpressionFilterExpression;
		public ParserRule getRule() { return rule; }

		//ParFilterExpression | ExpressionFilterExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParFilterExpression
		public RuleCall getParFilterExpressionParserRuleCall_0() { return cParFilterExpressionParserRuleCall_0; }

		//ExpressionFilterExpression
		public RuleCall getExpressionFilterExpressionParserRuleCall_1() { return cExpressionFilterExpressionParserRuleCall_1; }
	}

	public class ParFilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParFilterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParFilterExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionFilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFilterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftFilterNodeParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightFilterNodeParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//ExpressionFilterExpression:
		//	left=FilterNode operator=Operator right=FilterNode;
		public ParserRule getRule() { return rule; }

		//left=FilterNode operator=Operator right=FilterNode
		public Group getGroup() { return cGroup; }

		//left=FilterNode
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//FilterNode
		public RuleCall getLeftFilterNodeParserRuleCall_0_0() { return cLeftFilterNodeParserRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//right=FilterNode
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//FilterNode
		public RuleCall getRightFilterNodeParserRuleCall_2_0() { return cRightFilterNodeParserRuleCall_2_0; }
	}

	public class FilterNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraphNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilterNode:
		//	GraphNode | Function;
		public ParserRule getRule() { return rule; }

		//GraphNode | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//GraphNode
		public RuleCall getGraphNodeParserRuleCall_0() { return cGraphNodeParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSparqlFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function:
		//	NamedFunction | SparqlFunction;
		public ParserRule getRule() { return rule; }

		//NamedFunction | SparqlFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamedFunction
		public RuleCall getNamedFunctionParserRuleCall_0() { return cNamedFunctionParserRuleCall_0; }

		//SparqlFunction
		public RuleCall getSparqlFunctionParserRuleCall_1() { return cSparqlFunctionParserRuleCall_1; }
	}

	public class NamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixPrefixIDTerminalRuleCall_0_0_1 = (RuleCall)cPrefixPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersVariableParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NamedFunction hidden(WS):
		//	prefix=[Prefix] ":" name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")";
		public ParserRule getRule() { return rule; }

		//prefix=[Prefix] ":" name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")"
		public Group getGroup() { return cGroup; }

		//prefix=[Prefix]
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//[Prefix]
		public CrossReference getPrefixPrefixCrossReference_0_0() { return cPrefixPrefixCrossReference_0_0; }

		//ID
		public RuleCall getPrefixPrefixIDTerminalRuleCall_0_0_1() { return cPrefixPrefixIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=Variable
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_4_0() { return cParametersVariableParserRuleCall_4_0; }

		//("," parameters+=Variable)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_5_1_0() { return cParametersVariableParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class SparqlFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SparqlFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersVariableParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SparqlFunction:
		//	name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=Variable
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_2_0() { return cParametersVariableParserRuleCall_2_0; }

		//("," parameters+=Variable)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_3_1_0() { return cParametersVariableParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class BuiltInCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSTRKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLANGKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLANGMATCHESKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_2_0 = (RuleCall)cLeftAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRightAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_2_4_0 = (RuleCall)cRightAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cDATATYPEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_3_2_0 = (RuleCall)cExprAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cBOUNDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cVarAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_4_2_0 = (RuleCall)cVarAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cIRIKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExprAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_5_2_0 = (RuleCall)cExprAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cURIKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExprAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_6_2_0 = (RuleCall)cExprAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cBNODEKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cExprAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_7_2_0 = (RuleCall)cExprAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cIFKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cIfExprAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cIfExprExpressionParserRuleCall_8_2_0 = (RuleCall)cIfExprAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cThenExprAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cThenExprExpressionParserRuleCall_8_4_0 = (RuleCall)cThenExprAssignment_8_4.eContents().get(0);
		private final Keyword cCommaKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Assignment cElseExprAssignment_8_6 = (Assignment)cGroup_8.eContents().get(6);
		private final RuleCall cElseExprExpressionParserRuleCall_8_6_0 = (RuleCall)cElseExprAssignment_8_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_7 = (Keyword)cGroup_8.eContents().get(7);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cSTRLANGKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cLeftAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_9_2_0 = (RuleCall)cLeftAssignment_9_2.eContents().get(0);
		private final Keyword cCommaKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cRightAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_9_4_0 = (RuleCall)cRightAssignment_9_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cSTRDTKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cLeftAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_10_2_0 = (RuleCall)cLeftAssignment_10_2.eContents().get(0);
		private final Keyword cCommaKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cRightAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_10_4_0 = (RuleCall)cRightAssignment_10_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cSameTermKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cLeftAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_11_2_0 = (RuleCall)cLeftAssignment_11_2.eContents().get(0);
		private final Keyword cCommaKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Assignment cRightAssignment_11_4 = (Assignment)cGroup_11.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_11_4_0 = (RuleCall)cRightAssignment_11_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cIsIRIKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cExprAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_12_2_0 = (RuleCall)cExprAssignment_12_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cIsURIKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cExprAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_13_2_0 = (RuleCall)cExprAssignment_13_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cIsBLANKKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cExprAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_14_2_0 = (RuleCall)cExprAssignment_14_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Keyword cIsLITERALKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cExprAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_15_2_0 = (RuleCall)cExprAssignment_15_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_3 = (Keyword)cGroup_15.eContents().get(3);
		
		//BuiltInCall:
		//	"STR" "(" expr=Expression ")" //	|	'COALESCE' ExpressionList 
		//	| "LANG" "(" expr=Expression ")" | "LANGMATCHES" "(" left=Expression "," right=Expression ")" | "DATATYPE" "("
		//	expr=Expression ")" | "BOUND" "(" var=Variable ")" | "IRI" "(" expr=Expression ")" | "URI" "(" expr=Expression ")" |
		//	"BNODE" "(" expr=Expression // | NIL ) 
		//	")" | "IF" "(" ifExpr=Expression "," thenExpr=Expression "," elseExpr=Expression ")" | "STRLANG" "(" left=Expression
		//	"," right=Expression ")" | "STRDT" "(" left=Expression "," right=Expression ")" | "sameTerm" "(" left=Expression ","
		//	right=Expression ")" | "isIRI" "(" expr=Expression ")" | "isURI" "(" expr=Expression ")" | "isBLANK" "("
		//	expr=Expression ")" | "isLITERAL" "(" expr=Expression ")";
		public ParserRule getRule() { return rule; }

		//"STR" "(" expr=Expression ")" //	|	'COALESCE' ExpressionList 
		//| "LANG" "(" expr=Expression ")" | "LANGMATCHES" "(" left=Expression "," right=Expression ")" | "DATATYPE" "("
		//expr=Expression ")" | "BOUND" "(" var=Variable ")" | "IRI" "(" expr=Expression ")" | "URI" "(" expr=Expression ")" |
		//"BNODE" "(" expr=Expression // | NIL ) 
		//")" | "IF" "(" ifExpr=Expression "," thenExpr=Expression "," elseExpr=Expression ")" | "STRLANG" "(" left=Expression ","
		//right=Expression ")" | "STRDT" "(" left=Expression "," right=Expression ")" | "sameTerm" "(" left=Expression ","
		//right=Expression ")" | "isIRI" "(" expr=Expression ")" | "isURI" "(" expr=Expression ")" | "isBLANK" "("
		//expr=Expression ")" | "isLITERAL" "(" expr=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STR" "(" expr=Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"STR"
		public Keyword getSTRKeyword_0_0() { return cSTRKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//expr=Expression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_2_0() { return cExprExpressionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"LANG" "(" expr=Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"LANG"
		public Keyword getLANGKeyword_1_0() { return cLANGKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//expr=Expression
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_0() { return cExprExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"LANGMATCHES" "(" left=Expression "," right=Expression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"LANGMATCHES"
		public Keyword getLANGMATCHESKeyword_2_0() { return cLANGMATCHESKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//left=Expression
		public Assignment getLeftAssignment_2_2() { return cLeftAssignment_2_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_2_0() { return cLeftExpressionParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//right=Expression
		public Assignment getRightAssignment_2_4() { return cRightAssignment_2_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_4_0() { return cRightExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//"DATATYPE" "(" expr=Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"DATATYPE"
		public Keyword getDATATYPEKeyword_3_0() { return cDATATYPEKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//expr=Expression
		public Assignment getExprAssignment_3_2() { return cExprAssignment_3_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_2_0() { return cExprExpressionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"BOUND" "(" var=Variable ")"
		public Group getGroup_4() { return cGroup_4; }

		//"BOUND"
		public Keyword getBOUNDKeyword_4_0() { return cBOUNDKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//var=Variable
		public Assignment getVarAssignment_4_2() { return cVarAssignment_4_2; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_4_2_0() { return cVarVariableParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//"IRI" "(" expr=Expression ")"
		public Group getGroup_5() { return cGroup_5; }

		//"IRI"
		public Keyword getIRIKeyword_5_0() { return cIRIKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//expr=Expression
		public Assignment getExprAssignment_5_2() { return cExprAssignment_5_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_2_0() { return cExprExpressionParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//"URI" "(" expr=Expression ")"
		public Group getGroup_6() { return cGroup_6; }

		//"URI"
		public Keyword getURIKeyword_6_0() { return cURIKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//expr=Expression
		public Assignment getExprAssignment_6_2() { return cExprAssignment_6_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_2_0() { return cExprExpressionParserRuleCall_6_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//"BNODE" "(" expr=Expression // | NIL ) 
		//")"
		public Group getGroup_7() { return cGroup_7; }

		//"BNODE"
		public Keyword getBNODEKeyword_7_0() { return cBNODEKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//expr=Expression
		public Assignment getExprAssignment_7_2() { return cExprAssignment_7_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_7_2_0() { return cExprExpressionParserRuleCall_7_2_0; }

		//// | NIL ) 
		//")"
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }

		//"IF" "(" ifExpr=Expression "," thenExpr=Expression "," elseExpr=Expression ")"
		public Group getGroup_8() { return cGroup_8; }

		//"IF"
		public Keyword getIFKeyword_8_0() { return cIFKeyword_8_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//ifExpr=Expression
		public Assignment getIfExprAssignment_8_2() { return cIfExprAssignment_8_2; }

		//Expression
		public RuleCall getIfExprExpressionParserRuleCall_8_2_0() { return cIfExprExpressionParserRuleCall_8_2_0; }

		//","
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }

		//thenExpr=Expression
		public Assignment getThenExprAssignment_8_4() { return cThenExprAssignment_8_4; }

		//Expression
		public RuleCall getThenExprExpressionParserRuleCall_8_4_0() { return cThenExprExpressionParserRuleCall_8_4_0; }

		//","
		public Keyword getCommaKeyword_8_5() { return cCommaKeyword_8_5; }

		//elseExpr=Expression
		public Assignment getElseExprAssignment_8_6() { return cElseExprAssignment_8_6; }

		//Expression
		public RuleCall getElseExprExpressionParserRuleCall_8_6_0() { return cElseExprExpressionParserRuleCall_8_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_7() { return cRightParenthesisKeyword_8_7; }

		//"STRLANG" "(" left=Expression "," right=Expression ")"
		public Group getGroup_9() { return cGroup_9; }

		//"STRLANG"
		public Keyword getSTRLANGKeyword_9_0() { return cSTRLANGKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//left=Expression
		public Assignment getLeftAssignment_9_2() { return cLeftAssignment_9_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_9_2_0() { return cLeftExpressionParserRuleCall_9_2_0; }

		//","
		public Keyword getCommaKeyword_9_3() { return cCommaKeyword_9_3; }

		//right=Expression
		public Assignment getRightAssignment_9_4() { return cRightAssignment_9_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_9_4_0() { return cRightExpressionParserRuleCall_9_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_5() { return cRightParenthesisKeyword_9_5; }

		//"STRDT" "(" left=Expression "," right=Expression ")"
		public Group getGroup_10() { return cGroup_10; }

		//"STRDT"
		public Keyword getSTRDTKeyword_10_0() { return cSTRDTKeyword_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }

		//left=Expression
		public Assignment getLeftAssignment_10_2() { return cLeftAssignment_10_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_10_2_0() { return cLeftExpressionParserRuleCall_10_2_0; }

		//","
		public Keyword getCommaKeyword_10_3() { return cCommaKeyword_10_3; }

		//right=Expression
		public Assignment getRightAssignment_10_4() { return cRightAssignment_10_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_10_4_0() { return cRightExpressionParserRuleCall_10_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }

		//"sameTerm" "(" left=Expression "," right=Expression ")"
		public Group getGroup_11() { return cGroup_11; }

		//"sameTerm"
		public Keyword getSameTermKeyword_11_0() { return cSameTermKeyword_11_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_1() { return cLeftParenthesisKeyword_11_1; }

		//left=Expression
		public Assignment getLeftAssignment_11_2() { return cLeftAssignment_11_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_11_2_0() { return cLeftExpressionParserRuleCall_11_2_0; }

		//","
		public Keyword getCommaKeyword_11_3() { return cCommaKeyword_11_3; }

		//right=Expression
		public Assignment getRightAssignment_11_4() { return cRightAssignment_11_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_11_4_0() { return cRightExpressionParserRuleCall_11_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_5() { return cRightParenthesisKeyword_11_5; }

		//"isIRI" "(" expr=Expression ")"
		public Group getGroup_12() { return cGroup_12; }

		//"isIRI"
		public Keyword getIsIRIKeyword_12_0() { return cIsIRIKeyword_12_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_1() { return cLeftParenthesisKeyword_12_1; }

		//expr=Expression
		public Assignment getExprAssignment_12_2() { return cExprAssignment_12_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_12_2_0() { return cExprExpressionParserRuleCall_12_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_3() { return cRightParenthesisKeyword_12_3; }

		//"isURI" "(" expr=Expression ")"
		public Group getGroup_13() { return cGroup_13; }

		//"isURI"
		public Keyword getIsURIKeyword_13_0() { return cIsURIKeyword_13_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_1() { return cLeftParenthesisKeyword_13_1; }

		//expr=Expression
		public Assignment getExprAssignment_13_2() { return cExprAssignment_13_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_13_2_0() { return cExprExpressionParserRuleCall_13_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_3() { return cRightParenthesisKeyword_13_3; }

		//"isBLANK" "(" expr=Expression ")"
		public Group getGroup_14() { return cGroup_14; }

		//"isBLANK"
		public Keyword getIsBLANKKeyword_14_0() { return cIsBLANKKeyword_14_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_1() { return cLeftParenthesisKeyword_14_1; }

		//expr=Expression
		public Assignment getExprAssignment_14_2() { return cExprAssignment_14_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_14_2_0() { return cExprExpressionParserRuleCall_14_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_3() { return cRightParenthesisKeyword_14_3; }

		//"isLITERAL" "(" expr=Expression ")"
		public Group getGroup_15() { return cGroup_15; }

		//"isLITERAL"
		public Keyword getIsLITERALKeyword_15_0() { return cIsLITERALKeyword_15_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_1() { return cLeftParenthesisKeyword_15_1; }

		//expr=Expression
		public Assignment getExprAssignment_15_2() { return cExprAssignment_15_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_15_2_0() { return cExprExpressionParserRuleCall_15_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_3() { return cRightParenthesisKeyword_15_3; }
	}

	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCountAggregateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCOUNTKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIsDistinctAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cIsDistinctDISTINCTKeyword_0_3_0 = (Keyword)cIsDistinctAssignment_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Assignment cIsAllAssignment_0_4_0 = (Assignment)cAlternatives_0_4.eContents().get(0);
		private final Keyword cIsAllAsteriskKeyword_0_4_0_0 = (Keyword)cIsAllAssignment_0_4_0.eContents().get(0);
		private final Assignment cExprAssignment_0_4_1 = (Assignment)cAlternatives_0_4.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_4_1_0 = (RuleCall)cExprAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSumAggregateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSUMKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExprAggArgParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMinAgregateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMINKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExprAggArgParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMaxAggregateAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cMAXKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprExprAggArgParserRuleCall_3_2_0 = (RuleCall)cExprAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAvgAggregateAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAVGKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExprAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExprExprAggArgParserRuleCall_4_2_0 = (RuleCall)cExprAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSampleAggregateAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSAMPLEKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExprAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExprExprAggArgParserRuleCall_5_2_0 = (RuleCall)cExprAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cGroupAggregateAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cGROUP_CONCATKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cIsDistinctAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final Keyword cIsDistinctDISTINCTKeyword_6_3_0 = (Keyword)cIsDistinctAssignment_6_3.eContents().get(0);
		private final Assignment cExprAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_6_4_0 = (RuleCall)cExprAssignment_6_4.eContents().get(0);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cCommaKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Assignment cExprAssignment_6_5_1 = (Assignment)cGroup_6_5.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_6_5_1_0 = (RuleCall)cExprAssignment_6_5_1.eContents().get(0);
		private final Group cGroup_6_6 = (Group)cGroup_6.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_6_0 = (Keyword)cGroup_6_6.eContents().get(0);
		private final Keyword cSEPARATORKeyword_6_6_1 = (Keyword)cGroup_6_6.eContents().get(1);
		private final Keyword cEqualsSignKeyword_6_6_2 = (Keyword)cGroup_6_6.eContents().get(2);
		private final Assignment cValueAssignment_6_6_3 = (Assignment)cGroup_6_6.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_6_6_3_0 = (RuleCall)cValueAssignment_6_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		
		//Aggregate:
		//	{CountAggregate} "COUNT" "(" isDistinct?="DISTINCT"? (isAll?="*" | expr=Expression) ")" | {SumAggregate} "SUM"
		//	expr=ExprAggArg | {MinAgregate} "MIN" expr=ExprAggArg | {MaxAggregate} "MAX" expr=ExprAggArg | {AvgAggregate} "AVG"
		//	expr=ExprAggArg | {SampleAggregate} "SAMPLE" expr=ExprAggArg | {GroupAggregate} "GROUP_CONCAT" "("
		//	isDistinct?="DISTINCT"? expr+=Expression ("," expr+=Expression)* (";" "SEPARATOR" "=" value=STRING)? ")";
		public ParserRule getRule() { return rule; }

		//{CountAggregate} "COUNT" "(" isDistinct?="DISTINCT"? (isAll?="*" | expr=Expression) ")" | {SumAggregate} "SUM"
		//expr=ExprAggArg | {MinAgregate} "MIN" expr=ExprAggArg | {MaxAggregate} "MAX" expr=ExprAggArg | {AvgAggregate} "AVG"
		//expr=ExprAggArg | {SampleAggregate} "SAMPLE" expr=ExprAggArg | {GroupAggregate} "GROUP_CONCAT" "("
		//isDistinct?="DISTINCT"? expr+=Expression ("," expr+=Expression)* (";" "SEPARATOR" "=" value=STRING)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CountAggregate} "COUNT" "(" isDistinct?="DISTINCT"? (isAll?="*" | expr=Expression) ")"
		public Group getGroup_0() { return cGroup_0; }

		//{CountAggregate}
		public Action getCountAggregateAction_0_0() { return cCountAggregateAction_0_0; }

		//"COUNT"
		public Keyword getCOUNTKeyword_0_1() { return cCOUNTKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_0_3() { return cIsDistinctAssignment_0_3; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_0_3_0() { return cIsDistinctDISTINCTKeyword_0_3_0; }

		//isAll?="*" | expr=Expression
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//isAll?="*"
		public Assignment getIsAllAssignment_0_4_0() { return cIsAllAssignment_0_4_0; }

		//"*"
		public Keyword getIsAllAsteriskKeyword_0_4_0_0() { return cIsAllAsteriskKeyword_0_4_0_0; }

		//expr=Expression
		public Assignment getExprAssignment_0_4_1() { return cExprAssignment_0_4_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_4_1_0() { return cExprExpressionParserRuleCall_0_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//{SumAggregate} "SUM" expr=ExprAggArg
		public Group getGroup_1() { return cGroup_1; }

		//{SumAggregate}
		public Action getSumAggregateAction_1_0() { return cSumAggregateAction_1_0; }

		//"SUM"
		public Keyword getSUMKeyword_1_1() { return cSUMKeyword_1_1; }

		//expr=ExprAggArg
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//ExprAggArg
		public RuleCall getExprExprAggArgParserRuleCall_1_2_0() { return cExprExprAggArgParserRuleCall_1_2_0; }

		//{MinAgregate} "MIN" expr=ExprAggArg
		public Group getGroup_2() { return cGroup_2; }

		//{MinAgregate}
		public Action getMinAgregateAction_2_0() { return cMinAgregateAction_2_0; }

		//"MIN"
		public Keyword getMINKeyword_2_1() { return cMINKeyword_2_1; }

		//expr=ExprAggArg
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//ExprAggArg
		public RuleCall getExprExprAggArgParserRuleCall_2_2_0() { return cExprExprAggArgParserRuleCall_2_2_0; }

		//{MaxAggregate} "MAX" expr=ExprAggArg
		public Group getGroup_3() { return cGroup_3; }

		//{MaxAggregate}
		public Action getMaxAggregateAction_3_0() { return cMaxAggregateAction_3_0; }

		//"MAX"
		public Keyword getMAXKeyword_3_1() { return cMAXKeyword_3_1; }

		//expr=ExprAggArg
		public Assignment getExprAssignment_3_2() { return cExprAssignment_3_2; }

		//ExprAggArg
		public RuleCall getExprExprAggArgParserRuleCall_3_2_0() { return cExprExprAggArgParserRuleCall_3_2_0; }

		//{AvgAggregate} "AVG" expr=ExprAggArg
		public Group getGroup_4() { return cGroup_4; }

		//{AvgAggregate}
		public Action getAvgAggregateAction_4_0() { return cAvgAggregateAction_4_0; }

		//"AVG"
		public Keyword getAVGKeyword_4_1() { return cAVGKeyword_4_1; }

		//expr=ExprAggArg
		public Assignment getExprAssignment_4_2() { return cExprAssignment_4_2; }

		//ExprAggArg
		public RuleCall getExprExprAggArgParserRuleCall_4_2_0() { return cExprExprAggArgParserRuleCall_4_2_0; }

		//{SampleAggregate} "SAMPLE" expr=ExprAggArg
		public Group getGroup_5() { return cGroup_5; }

		//{SampleAggregate}
		public Action getSampleAggregateAction_5_0() { return cSampleAggregateAction_5_0; }

		//"SAMPLE"
		public Keyword getSAMPLEKeyword_5_1() { return cSAMPLEKeyword_5_1; }

		//expr=ExprAggArg
		public Assignment getExprAssignment_5_2() { return cExprAssignment_5_2; }

		//ExprAggArg
		public RuleCall getExprExprAggArgParserRuleCall_5_2_0() { return cExprExprAggArgParserRuleCall_5_2_0; }

		//{GroupAggregate} "GROUP_CONCAT" "(" isDistinct?="DISTINCT"? expr+=Expression ("," expr+=Expression)* (";" "SEPARATOR"
		//"=" value=STRING)? ")"
		public Group getGroup_6() { return cGroup_6; }

		//{GroupAggregate}
		public Action getGroupAggregateAction_6_0() { return cGroupAggregateAction_6_0; }

		//"GROUP_CONCAT"
		public Keyword getGROUP_CONCATKeyword_6_1() { return cGROUP_CONCATKeyword_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_6_3() { return cIsDistinctAssignment_6_3; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_6_3_0() { return cIsDistinctDISTINCTKeyword_6_3_0; }

		//expr+=Expression
		public Assignment getExprAssignment_6_4() { return cExprAssignment_6_4; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_4_0() { return cExprExpressionParserRuleCall_6_4_0; }

		//("," expr+=Expression)*
		public Group getGroup_6_5() { return cGroup_6_5; }

		//","
		public Keyword getCommaKeyword_6_5_0() { return cCommaKeyword_6_5_0; }

		//expr+=Expression
		public Assignment getExprAssignment_6_5_1() { return cExprAssignment_6_5_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_5_1_0() { return cExprExpressionParserRuleCall_6_5_1_0; }

		//(";" "SEPARATOR" "=" value=STRING)?
		public Group getGroup_6_6() { return cGroup_6_6; }

		//";"
		public Keyword getSemicolonKeyword_6_6_0() { return cSemicolonKeyword_6_6_0; }

		//"SEPARATOR"
		public Keyword getSEPARATORKeyword_6_6_1() { return cSEPARATORKeyword_6_6_1; }

		//"="
		public Keyword getEqualsSignKeyword_6_6_2() { return cEqualsSignKeyword_6_6_2; }

		//value=STRING
		public Assignment getValueAssignment_6_6_3() { return cValueAssignment_6_6_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_6_6_3_0() { return cValueSTRINGTerminalRuleCall_6_6_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_7() { return cRightParenthesisKeyword_6_7; }
	}

	public class ExprAggArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAggArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsDistinctAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsDistinctDISTINCTKeyword_1_0 = (Keyword)cIsDistinctAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprAggArg:
		//	"(" isDistinct?="DISTINCT"? expr=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" isDistinct?="DISTINCT"? expr=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//isDistinct?="DISTINCT"?
		public Assignment getIsDistinctAssignment_1() { return cIsDistinctAssignment_1; }

		//"DISTINCT"
		public Keyword getIsDistinctDISTINCTKeyword_1_0() { return cIsDistinctDISTINCTKeyword_1_0; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class GraphNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIRIParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlankNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParameterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//GraphNode:
		//	Variable | Value | IRI | BlankNode | Parameter;
		public ParserRule getRule() { return rule; }

		//Variable | Value | IRI | BlankNode | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//IRI
		public RuleCall getIRIParserRuleCall_2() { return cIRIParserRuleCall_2; }

		//BlankNode
		public RuleCall getBlankNodeParserRuleCall_3() { return cBlankNodeParserRuleCall_3; }

		//Parameter
		public RuleCall getParameterParserRuleCall_4() { return cParameterParserRuleCall_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnNamedVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	UnNamedVariable | NamedVariable;
		public ParserRule getRule() { return rule; }

		//UnNamedVariable | NamedVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnNamedVariable
		public RuleCall getUnNamedVariableParserRuleCall_0() { return cUnNamedVariableParserRuleCall_0; }

		//NamedVariable
		public RuleCall getNamedVariableParserRuleCall_1() { return cNamedVariableParserRuleCall_1; }
	}

	public class UnNamedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnNamedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UnNamedVariable:
		//	"?" name=ID;
		public ParserRule getRule() { return rule; }

		//"?" name=ID
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class NamedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixPrefixIDTerminalRuleCall_0_0_1 = (RuleCall)cPrefixPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NamedVariable:
		//	prefix=[Prefix] ":" name=ID;
		public ParserRule getRule() { return rule; }

		//prefix=[Prefix] ":" name=ID
		public Group getGroup() { return cGroup; }

		//prefix=[Prefix]
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//[Prefix]
		public CrossReference getPrefixPrefixCrossReference_0_0() { return cPrefixPrefixCrossReference_0_0; }

		//ID
		public RuleCall getPrefixPrefixIDTerminalRuleCall_0_0_1() { return cPrefixPrefixIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class BlankNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlankNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BlankNode hidden(WS):
		//	"_:" name=ID;
		public ParserRule getRule() { return rule; }

		//"_:" name=ID
		public Group getGroup() { return cGroup; }

		//"_:"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter hidden(WS):
		//	"?:" name=ID;
		public ParserRule getRule() { return rule; }

		//"?:" name=ID
		public Group getGroup() { return cGroup; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_0() { return cQuestionMarkColonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	StringValue | IntegerValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }
	}

	public class IRIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IRI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIRIAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIRI_TERMINALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IRI:
		//	{IRI} value=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//{IRI} value=IRI_TERMINAL
		public Group getGroup() { return cGroup; }

		//{IRI}
		public Action getIRIAction_0() { return cIRIAction_0; }

		//value=IRI_TERMINAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IRI_TERMINAL
		public RuleCall getValueIRI_TERMINALTerminalRuleCall_1_0() { return cValueIRI_TERMINALTerminalRuleCall_1_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//StringValue:
		//	value=STRING tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=STRING tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//IntegerValue:
		//	value=INT tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=INT tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class RDFTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RDFTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLangTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RDFTag:
		//	TypeTag | LangTag;
		public ParserRule getRule() { return rule; }

		//TypeTag | LangTag
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeTag
		public RuleCall getTypeTagParserRuleCall_0() { return cTypeTagParserRuleCall_0; }

		//LangTag
		public RuleCall getLangTagParserRuleCall_1() { return cLangTagParserRuleCall_1; }
	}

	public class TypeTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGraphNodeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeTag hidden(WS):
		//	"^^" type=GraphNode;
		public ParserRule getRule() { return rule; }

		//"^^" type=GraphNode
		public Group getGroup() { return cGroup; }

		//"^^"
		public Keyword getCircumflexAccentCircumflexAccentKeyword_0() { return cCircumflexAccentCircumflexAccentKeyword_0; }

		//type=GraphNode
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//GraphNode
		public RuleCall getTypeGraphNodeParserRuleCall_1_0() { return cTypeGraphNodeParserRuleCall_1_0; }
	}

	public class LangTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LangTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLangIDTerminalRuleCall_1_0 = (RuleCall)cLangAssignment_1.eContents().get(0);
		
		//LangTag hidden(WS):
		//	"@" lang=ID;
		public ParserRule getRule() { return rule; }

		//"@" lang=ID
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//lang=ID
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//ID
		public RuleCall getLangIDTerminalRuleCall_1_0() { return cLangIDTerminalRuleCall_1_0; }
	}
	
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSumPlusSignKeyword_6_0 = (Keyword)cSumEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDivSolidusKeyword_7_0 = (Keyword)cDivEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSubHyphenMinusKeyword_8_0 = (Keyword)cSubEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicityEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMultiplicityAsteriskKeyword_9_0 = (Keyword)cMultiplicityEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Operator:
		//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | sum="+" | div="/" |
		//	sub="-" | multiplicity="*";
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | sum="+" | div="/" |
		//sub="-" | multiplicity="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }

		//sum="+"
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_6() { return cSumEnumLiteralDeclaration_6; }

		//"+"
		public Keyword getSumPlusSignKeyword_6_0() { return cSumPlusSignKeyword_6_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_7() { return cDivEnumLiteralDeclaration_7; }

		//"/"
		public Keyword getDivSolidusKeyword_7_0() { return cDivSolidusKeyword_7_0; }

		//sub="-"
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_8() { return cSubEnumLiteralDeclaration_8; }

		//"-"
		public Keyword getSubHyphenMinusKeyword_8_0() { return cSubHyphenMinusKeyword_8_0; }

		//multiplicity="*"
		public EnumLiteralDeclaration getMultiplicityEnumLiteralDeclaration_9() { return cMultiplicityEnumLiteralDeclaration_9; }

		//"*"
		public Keyword getMultiplicityAsteriskKeyword_9_0() { return cMultiplicityAsteriskKeyword_9_0; }
	}
	
	private SPARQLQueryElements pSPARQLQuery;
	private PrefixElements pPrefix;
	private UnNamedPrefixElements pUnNamedPrefix;
	private BaseElements pBase;
	private SelectionQueryElements pSelectionQuery;
	private SelectQueryElements pSelectQuery;
	private SelectAllQueryElements pSelectAllQuery;
	private SelectVariablesQueryElements pSelectVariablesQuery;
	private AskQueryElements pAskQuery;
	private DescribeQueryElements pDescribeQuery;
	private ConstructQueryElements pConstructQuery;
	private UpdateQueryElements pUpdateQuery;
	private UpdateOperationElements pUpdateOperation;
	private ModifyQueryElements pModifyQuery;
	private CreateGraphQueryElements pCreateGraphQuery;
	private DropGraphQueryElements pDropGraphQuery;
	private LoadGraphQueryElements pLoadGraphQuery;
	private ClearGraphQueryElements pClearGraphQuery;
	private UsingGraphElements pUsingGraph;
	private InsertQueryElements pInsertQuery;
	private InsertDataQueryElements pInsertDataQuery;
	private DeleteQueryElements pDeleteQuery;
	private DeleteDataQueryElements pDeleteDataQuery;
	private DeleteWhereQueryElements pDeleteWhereQuery;
	private DatasetClauseElements pDatasetClause;
	private DefaultDataSetElements pDefaultDataSet;
	private NamedDataSetElements pNamedDataSet;
	private ServiceDataSetElements pServiceDataSet;
	private WhereClauseElements pWhereClause;
	private GroupClauseElements pGroupClause;
	private GroupConditionElements pGroupCondition;
	private HavingClauseElements pHavingClause;
	private ConstraintElements pConstraint;
	private LimitClauseElements pLimitClause;
	private GroupGraphPatternElements pGroupGraphPattern;
	private SubSelectQueryElements pSubSelectQuery;
	private GroupGraphPatternSubElements pGroupGraphPatternSub;
	private GraphPatternElements pGraphPattern;
	private TriplesSameSubjectElements pTriplesSameSubject;
	private GroupOrUnionGraphPatternElements pGroupOrUnionGraphPattern;
	private OptionalGraphPatternElements pOptionalGraphPattern;
	private PropertyListElements pPropertyList;
	private GraphGraphPatternElements pGraphGraphPattern;
	private ServiceGraphPatternElements pServiceGraphPattern;
	private FilterPatternElements pFilterPattern;
	private ExistsPatternElements pExistsPattern;
	private NotExistsPatternElements pNotExistsPattern;
	private MinusPatternElements pMinusPattern;
	private ExpressionElements pExpression;
	private AndFilterExpressionElements pAndFilterExpression;
	private ConcreteFilterExpressionElements pConcreteFilterExpression;
	private ParFilterExpressionElements pParFilterExpression;
	private ExpressionFilterExpressionElements pExpressionFilterExpression;
	private FilterNodeElements pFilterNode;
	private FunctionElements pFunction;
	private NamedFunctionElements pNamedFunction;
	private SparqlFunctionElements pSparqlFunction;
	private BuiltInCallElements pBuiltInCall;
	private AggregateElements pAggregate;
	private ExprAggArgElements pExprAggArg;
	private OperatorElements unknownRuleOperator;
	private GraphNodeElements pGraphNode;
	private VariableElements pVariable;
	private UnNamedVariableElements pUnNamedVariable;
	private NamedVariableElements pNamedVariable;
	private BlankNodeElements pBlankNode;
	private ParameterElements pParameter;
	private ValueElements pValue;
	private IRIElements pIRI;
	private StringValueElements pStringValue;
	private IntegerValueElements pIntegerValue;
	private RDFTagElements pRDFTag;
	private TypeTagElements pTypeTag;
	private LangTagElements pLangTag;
	private TerminalRule tIRI_TERMINAL;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public SparqlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////	DeleteInsertQuery
	//SPARQLQuery:
	//	SelectionQuery | UpdateQuery;
	public SPARQLQueryElements getSPARQLQueryAccess() {
		return (pSPARQLQuery != null) ? pSPARQLQuery : (pSPARQLQuery = new SPARQLQueryElements());
	}
	
	public ParserRule getSPARQLQueryRule() {
		return getSPARQLQueryAccess().getRule();
	}

	//Prefix:
	//	"PREFIX" name=ID ":" iref=IRI_TERMINAL | UnNamedPrefix;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//UnNamedPrefix returns Prefix:
	//	"PREFIX" ":" iref=IRI_TERMINAL;
	public UnNamedPrefixElements getUnNamedPrefixAccess() {
		return (pUnNamedPrefix != null) ? pUnNamedPrefix : (pUnNamedPrefix = new UnNamedPrefixElements());
	}
	
	public ParserRule getUnNamedPrefixRule() {
		return getUnNamedPrefixAccess().getRule();
	}

	//Base:
	//	"BASE" iref=IRI;
	public BaseElements getBaseAccess() {
		return (pBase != null) ? pBase : (pBase = new BaseElements());
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}

	//SelectionQuery:
	//	ConstructQuery | SelectQuery | AskQuery | DescribeQuery;
	public SelectionQueryElements getSelectionQueryAccess() {
		return (pSelectionQuery != null) ? pSelectionQuery : (pSelectionQuery = new SelectionQueryElements());
	}
	
	public ParserRule getSelectionQueryRule() {
		return getSelectionQueryAccess().getRule();
	}

	//SelectQuery:
	//	SelectAllQuery | SelectVariablesQuery;
	public SelectQueryElements getSelectQueryAccess() {
		return (pSelectQuery != null) ? pSelectQuery : (pSelectQuery = new SelectQueryElements());
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}

	//SelectAllQuery returns SelectQuery:
	//	base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? all?="*"
	//	datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause?
	//	limitClause=LimitClause?;
	public SelectAllQueryElements getSelectAllQueryAccess() {
		return (pSelectAllQuery != null) ? pSelectAllQuery : (pSelectAllQuery = new SelectAllQueryElements());
	}
	
	public ParserRule getSelectAllQueryRule() {
		return getSelectAllQueryAccess().getRule();
	}

	//SelectVariablesQuery returns SelectQuery:
	//	base=Base? prefixes+=Prefix* "SELECT" (isDistinct?="DISTINCT" | isReduced?="REDUCED")? variables+=Variable
	//	variables+=Variable* datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
	//	havingClause=HavingClause? limitClause=LimitClause?;
	public SelectVariablesQueryElements getSelectVariablesQueryAccess() {
		return (pSelectVariablesQuery != null) ? pSelectVariablesQuery : (pSelectVariablesQuery = new SelectVariablesQueryElements());
	}
	
	public ParserRule getSelectVariablesQueryRule() {
		return getSelectVariablesQueryAccess().getRule();
	}

	//AskQuery:
	//	base=Base? prefixes+=Prefix* "ASK" datasetClause+=DatasetClause* whereClause=WhereClause groupClause=GroupClause?
	//	havingClause=HavingClause? limitClause=LimitClause?;
	public AskQueryElements getAskQueryAccess() {
		return (pAskQuery != null) ? pAskQuery : (pAskQuery = new AskQueryElements());
	}
	
	public ParserRule getAskQueryRule() {
		return getAskQueryAccess().getRule();
	}

	//DescribeQuery:
	//	base=Base? prefixes+=Prefix* "DESCRIBE" variables+=GraphNode variables+=GraphNode* datasetClause+=DatasetClause*
	//	whereClause=WhereClause? groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?;
	public DescribeQueryElements getDescribeQueryAccess() {
		return (pDescribeQuery != null) ? pDescribeQuery : (pDescribeQuery = new DescribeQueryElements());
	}
	
	public ParserRule getDescribeQueryRule() {
		return getDescribeQueryAccess().getRule();
	}

	//ConstructQuery:
	//	base=Base? prefixes+=Prefix* "CONSTRUCT" constructTemplate=GroupGraphPattern datasetClause+=DatasetClause*
	//	whereClause=WhereClause groupClause=GroupClause? havingClause=HavingClause? limitClause=LimitClause?;
	public ConstructQueryElements getConstructQueryAccess() {
		return (pConstructQuery != null) ? pConstructQuery : (pConstructQuery = new ConstructQueryElements());
	}
	
	public ParserRule getConstructQueryRule() {
		return getConstructQueryAccess().getRule();
	}

	//UpdateQuery:
	//	{UpdateQuery} prefixes+=Prefix* operations+=UpdateOperation+;
	public UpdateQueryElements getUpdateQueryAccess() {
		return (pUpdateQuery != null) ? pUpdateQuery : (pUpdateQuery = new UpdateQueryElements());
	}
	
	public ParserRule getUpdateQueryRule() {
		return getUpdateQueryAccess().getRule();
	}

	////DeleteInsertQuery:
	////	(prefixes+=Prefix)*
	////	operations+=DeleteInsert
	////;
	//UpdateOperation:
	//	ModifyQuery | CreateGraphQuery | DropGraphQuery | LoadGraphQuery | ClearGraphQuery;
	public UpdateOperationElements getUpdateOperationAccess() {
		return (pUpdateOperation != null) ? pUpdateOperation : (pUpdateOperation = new UpdateOperationElements());
	}
	
	public ParserRule getUpdateOperationRule() {
		return getUpdateOperationAccess().getRule();
	}

	//ModifyQuery:
	//	("WITH" withGraph=IRI_TERMINAL)? query=InsertQuery | ("WITH" withGraph=IRI_TERMINAL)? query=InsertDataQuery | ("WITH"
	//	withGraph=IRI_TERMINAL)? query=DeleteQuery | ("WITH" withGraph=IRI_TERMINAL)? query=DeleteDataQuery | ("WITH"
	//	withGraph=IRI_TERMINAL)? query=DeleteWhereQuery;
	public ModifyQueryElements getModifyQueryAccess() {
		return (pModifyQuery != null) ? pModifyQuery : (pModifyQuery = new ModifyQueryElements());
	}
	
	public ParserRule getModifyQueryRule() {
		return getModifyQueryAccess().getRule();
	}

	//CreateGraphQuery:
	//	"CREATE" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL;
	public CreateGraphQueryElements getCreateGraphQueryAccess() {
		return (pCreateGraphQuery != null) ? pCreateGraphQuery : (pCreateGraphQuery = new CreateGraphQueryElements());
	}
	
	public ParserRule getCreateGraphQueryRule() {
		return getCreateGraphQueryAccess().getRule();
	}

	//DropGraphQuery:
	//	"DROP" isSilent="SILENT"? "GRAPH" graph=IRI_TERMINAL;
	public DropGraphQueryElements getDropGraphQueryAccess() {
		return (pDropGraphQuery != null) ? pDropGraphQuery : (pDropGraphQuery = new DropGraphQueryElements());
	}
	
	public ParserRule getDropGraphQueryRule() {
		return getDropGraphQueryAccess().getRule();
	}

	//LoadGraphQuery:
	//	"LOAD" graph=IRI_TERMINAL ("INTO" "GRAPH" intoGraph=IRI_TERMINAL)?;
	public LoadGraphQueryElements getLoadGraphQueryAccess() {
		return (pLoadGraphQuery != null) ? pLoadGraphQuery : (pLoadGraphQuery = new LoadGraphQueryElements());
	}
	
	public ParserRule getLoadGraphQueryRule() {
		return getLoadGraphQueryAccess().getRule();
	}

	//ClearGraphQuery:
	//	"CLEAR" "GRAPH" (uri=IRI_TERMINAL | isDefault?="DEFAULT");
	public ClearGraphQueryElements getClearGraphQueryAccess() {
		return (pClearGraphQuery != null) ? pClearGraphQuery : (pClearGraphQuery = new ClearGraphQueryElements());
	}
	
	public ParserRule getClearGraphQueryRule() {
		return getClearGraphQueryAccess().getRule();
	}

	////DeleteInsert:
	////	('WITH' withGraph=IRI_TERMINAL)?
	////	'DELETE' deletePattern=GroupGraphPattern
	////	'INSERT' insertPattern=GroupGraphPattern
	////	(usingGraphs+=UsingGraph)*
	////	(whereClause=WhereClause)?
	////;
	//UsingGraph:
	//	"USING" named?="NAMED"? uri=IRI_TERMINAL;
	public UsingGraphElements getUsingGraphAccess() {
		return (pUsingGraph != null) ? pUsingGraph : (pUsingGraph = new UsingGraphElements());
	}
	
	public ParserRule getUsingGraphRule() {
		return getUsingGraphAccess().getRule();
	}

	//InsertQuery:
	//	"INSERT" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern //	(usingGraphs+=UsingGraph)*
	//	whereClause=WhereClause?;
	public InsertQueryElements getInsertQueryAccess() {
		return (pInsertQuery != null) ? pInsertQuery : (pInsertQuery = new InsertQueryElements());
	}
	
	public ParserRule getInsertQueryRule() {
		return getInsertQueryAccess().getRule();
	}

	//InsertDataQuery:
	//	"INSERT" "DATA" ("INTO" graph=IRI_TERMINAL)? pattern=GroupGraphPattern;
	public InsertDataQueryElements getInsertDataQueryAccess() {
		return (pInsertDataQuery != null) ? pInsertDataQuery : (pInsertDataQuery = new InsertDataQueryElements());
	}
	
	public ParserRule getInsertDataQueryRule() {
		return getInsertDataQueryAccess().getRule();
	}

	//DeleteQuery:
	//	"DELETE" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern ("INSERT" insertPattern=GroupGraphPattern)? //	(usingGraphs+=UsingGraph)*
	//	whereClause=WhereClause?;
	public DeleteQueryElements getDeleteQueryAccess() {
		return (pDeleteQuery != null) ? pDeleteQuery : (pDeleteQuery = new DeleteQueryElements());
	}
	
	public ParserRule getDeleteQueryRule() {
		return getDeleteQueryAccess().getRule();
	}

	//DeleteDataQuery:
	//	"DELETE" "DATA" ("FROM" graph=IRI_TERMINAL)? pattern=GroupGraphPattern;
	public DeleteDataQueryElements getDeleteDataQueryAccess() {
		return (pDeleteDataQuery != null) ? pDeleteDataQuery : (pDeleteDataQuery = new DeleteDataQueryElements());
	}
	
	public ParserRule getDeleteDataQueryRule() {
		return getDeleteDataQueryAccess().getRule();
	}

	//DeleteWhereQuery:
	//	"DELETE" "WHERE" "{" pattern=GroupGraphPattern "}";
	public DeleteWhereQueryElements getDeleteWhereQueryAccess() {
		return (pDeleteWhereQuery != null) ? pDeleteWhereQuery : (pDeleteWhereQuery = new DeleteWhereQueryElements());
	}
	
	public ParserRule getDeleteWhereQueryRule() {
		return getDeleteWhereQueryAccess().getRule();
	}

	//DatasetClause:
	//	DefaultDataSet | NamedDataSet | ServiceDataSet;
	public DatasetClauseElements getDatasetClauseAccess() {
		return (pDatasetClause != null) ? pDatasetClause : (pDatasetClause = new DatasetClauseElements());
	}
	
	public ParserRule getDatasetClauseRule() {
		return getDatasetClauseAccess().getRule();
	}

	//DefaultDataSet:
	//	"FROM" dataSet=IRI;
	public DefaultDataSetElements getDefaultDataSetAccess() {
		return (pDefaultDataSet != null) ? pDefaultDataSet : (pDefaultDataSet = new DefaultDataSetElements());
	}
	
	public ParserRule getDefaultDataSetRule() {
		return getDefaultDataSetAccess().getRule();
	}

	//NamedDataSet:
	//	"FROM" "NAMED" dataSet=IRI;
	public NamedDataSetElements getNamedDataSetAccess() {
		return (pNamedDataSet != null) ? pNamedDataSet : (pNamedDataSet = new NamedDataSetElements());
	}
	
	public ParserRule getNamedDataSetRule() {
		return getNamedDataSetAccess().getRule();
	}

	//ServiceDataSet:
	//	"FROM" "SERVICE" dataSet=IRI;
	public ServiceDataSetElements getServiceDataSetAccess() {
		return (pServiceDataSet != null) ? pServiceDataSet : (pServiceDataSet = new ServiceDataSetElements());
	}
	
	public ParserRule getServiceDataSetRule() {
		return getServiceDataSetAccess().getRule();
	}

	//WhereClause:
	//	"WHERE" groupGraphPattern=GroupGraphPattern;
	public WhereClauseElements getWhereClauseAccess() {
		return (pWhereClause != null) ? pWhereClause : (pWhereClause = new WhereClauseElements());
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}

	//GroupClause:
	//	"GROUP" "BY" condition=GroupCondition;
	public GroupClauseElements getGroupClauseAccess() {
		return (pGroupClause != null) ? pGroupClause : (pGroupClause = new GroupClauseElements());
	}
	
	public ParserRule getGroupClauseRule() {
		return getGroupClauseAccess().getRule();
	}

	//GroupCondition:
	//	BuiltInCall | Function | Variable;
	public GroupConditionElements getGroupConditionAccess() {
		return (pGroupCondition != null) ? pGroupCondition : (pGroupCondition = new GroupConditionElements());
	}
	
	public ParserRule getGroupConditionRule() {
		return getGroupConditionAccess().getRule();
	}

	//HavingClause:
	//	"HAVING" constraint=Constraint;
	public HavingClauseElements getHavingClauseAccess() {
		return (pHavingClause != null) ? pHavingClause : (pHavingClause = new HavingClauseElements());
	}
	
	public ParserRule getHavingClauseRule() {
		return getHavingClauseAccess().getRule();
	}

	//Constraint:
	//	ParFilterExpression | BuiltInCall | Function;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//LimitClause:
	//	"LIMIT" limit=INT;
	public LimitClauseElements getLimitClauseAccess() {
		return (pLimitClause != null) ? pLimitClause : (pLimitClause = new LimitClauseElements());
	}
	
	public ParserRule getLimitClauseRule() {
		return getLimitClauseAccess().getRule();
	}

	//GroupGraphPattern:
	//	SubSelectQuery | GroupGraphPatternSub;
	public GroupGraphPatternElements getGroupGraphPatternAccess() {
		return (pGroupGraphPattern != null) ? pGroupGraphPattern : (pGroupGraphPattern = new GroupGraphPatternElements());
	}
	
	public ParserRule getGroupGraphPatternRule() {
		return getGroupGraphPatternAccess().getRule();
	}

	//SubSelectQuery:
	//	"{" "SELECT" variables+=Variable variables+=Variable* whereClause=WhereClause groupClause=GroupClause?
	//	havingClause=HavingClause? "}";
	public SubSelectQueryElements getSubSelectQueryAccess() {
		return (pSubSelectQuery != null) ? pSubSelectQuery : (pSubSelectQuery = new SubSelectQueryElements());
	}
	
	public ParserRule getSubSelectQueryRule() {
		return getSubSelectQueryAccess().getRule();
	}

	//GroupGraphPatternSub:
	//	"{" graphPatterns+=GraphPattern ("." graphPatterns+=GraphPattern)* "."? "}";
	public GroupGraphPatternSubElements getGroupGraphPatternSubAccess() {
		return (pGroupGraphPatternSub != null) ? pGroupGraphPatternSub : (pGroupGraphPatternSub = new GroupGraphPatternSubElements());
	}
	
	public ParserRule getGroupGraphPatternSubRule() {
		return getGroupGraphPatternSubAccess().getRule();
	}

	//GraphPattern:
	//	TriplesSameSubject | GroupOrUnionGraphPattern | OptionalGraphPattern | GraphGraphPattern | ServiceGraphPattern |
	//	FilterPattern | ExistsPattern | NotExistsPattern | MinusPattern;
	public GraphPatternElements getGraphPatternAccess() {
		return (pGraphPattern != null) ? pGraphPattern : (pGraphPattern = new GraphPatternElements());
	}
	
	public ParserRule getGraphPatternRule() {
		return getGraphPatternAccess().getRule();
	}

	//TriplesSameSubject:
	//	subject=GraphNode propertyList+=PropertyList (";" propertyList+=PropertyList)*;
	public TriplesSameSubjectElements getTriplesSameSubjectAccess() {
		return (pTriplesSameSubject != null) ? pTriplesSameSubject : (pTriplesSameSubject = new TriplesSameSubjectElements());
	}
	
	public ParserRule getTriplesSameSubjectRule() {
		return getTriplesSameSubjectAccess().getRule();
	}

	//GroupOrUnionGraphPattern:
	//	graphPatterns+=GroupGraphPattern ("UNION" graphPatterns+=GroupGraphPattern)?;
	public GroupOrUnionGraphPatternElements getGroupOrUnionGraphPatternAccess() {
		return (pGroupOrUnionGraphPattern != null) ? pGroupOrUnionGraphPattern : (pGroupOrUnionGraphPattern = new GroupOrUnionGraphPatternElements());
	}
	
	public ParserRule getGroupOrUnionGraphPatternRule() {
		return getGroupOrUnionGraphPatternAccess().getRule();
	}

	//OptionalGraphPattern:
	//	"OPTIONAL" graphPattern+=GroupGraphPattern;
	public OptionalGraphPatternElements getOptionalGraphPatternAccess() {
		return (pOptionalGraphPattern != null) ? pOptionalGraphPattern : (pOptionalGraphPattern = new OptionalGraphPatternElements());
	}
	
	public ParserRule getOptionalGraphPatternRule() {
		return getOptionalGraphPatternAccess().getRule();
	}

	//PropertyList:
	//	property=GraphNode object=GraphNode;
	public PropertyListElements getPropertyListAccess() {
		return (pPropertyList != null) ? pPropertyList : (pPropertyList = new PropertyListElements());
	}
	
	public ParserRule getPropertyListRule() {
		return getPropertyListAccess().getRule();
	}

	//GraphGraphPattern:
	//	"GRAPH" var=GraphNode pattern=GroupGraphPattern;
	public GraphGraphPatternElements getGraphGraphPatternAccess() {
		return (pGraphGraphPattern != null) ? pGraphGraphPattern : (pGraphGraphPattern = new GraphGraphPatternElements());
	}
	
	public ParserRule getGraphGraphPatternRule() {
		return getGraphGraphPatternAccess().getRule();
	}

	//ServiceGraphPattern:
	//	"SERVICE" var=GraphNode pattern=GroupGraphPattern;
	public ServiceGraphPatternElements getServiceGraphPatternAccess() {
		return (pServiceGraphPattern != null) ? pServiceGraphPattern : (pServiceGraphPattern = new ServiceGraphPatternElements());
	}
	
	public ParserRule getServiceGraphPatternRule() {
		return getServiceGraphPatternAccess().getRule();
	}

	//FilterPattern:
	//	"FILTER" "(" expression=Expression ")";
	public FilterPatternElements getFilterPatternAccess() {
		return (pFilterPattern != null) ? pFilterPattern : (pFilterPattern = new FilterPatternElements());
	}
	
	public ParserRule getFilterPatternRule() {
		return getFilterPatternAccess().getRule();
	}

	//ExistsPattern:
	//	"FILTER" "EXISTS" pattern=GroupGraphPattern;
	public ExistsPatternElements getExistsPatternAccess() {
		return (pExistsPattern != null) ? pExistsPattern : (pExistsPattern = new ExistsPatternElements());
	}
	
	public ParserRule getExistsPatternRule() {
		return getExistsPatternAccess().getRule();
	}

	//NotExistsPattern:
	//	"FILTER" "NOT" "EXISTS" pattern=GroupGraphPattern;
	public NotExistsPatternElements getNotExistsPatternAccess() {
		return (pNotExistsPattern != null) ? pNotExistsPattern : (pNotExistsPattern = new NotExistsPatternElements());
	}
	
	public ParserRule getNotExistsPatternRule() {
		return getNotExistsPatternAccess().getRule();
	}

	//MinusPattern:
	//	"MINUS" pattern=GroupGraphPattern;
	public MinusPatternElements getMinusPatternAccess() {
		return (pMinusPattern != null) ? pMinusPattern : (pMinusPattern = new MinusPatternElements());
	}
	
	public ParserRule getMinusPatternRule() {
		return getMinusPatternAccess().getRule();
	}

	//Expression:
	//	AndFilterExpression ({OrFilterExpression.entries+=current} ("||" entries+=AndFilterExpression)+)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AndFilterExpression returns Expression:
	//	ConcreteFilterExpression ({AndFilterExpression.entries+=current} ("&&" entries+=ConcreteFilterExpression)+)?;
	public AndFilterExpressionElements getAndFilterExpressionAccess() {
		return (pAndFilterExpression != null) ? pAndFilterExpression : (pAndFilterExpression = new AndFilterExpressionElements());
	}
	
	public ParserRule getAndFilterExpressionRule() {
		return getAndFilterExpressionAccess().getRule();
	}

	//ConcreteFilterExpression returns Expression:
	//	ParFilterExpression | ExpressionFilterExpression;
	public ConcreteFilterExpressionElements getConcreteFilterExpressionAccess() {
		return (pConcreteFilterExpression != null) ? pConcreteFilterExpression : (pConcreteFilterExpression = new ConcreteFilterExpressionElements());
	}
	
	public ParserRule getConcreteFilterExpressionRule() {
		return getConcreteFilterExpressionAccess().getRule();
	}

	//ParFilterExpression returns Expression:
	//	"(" Expression ")";
	public ParFilterExpressionElements getParFilterExpressionAccess() {
		return (pParFilterExpression != null) ? pParFilterExpression : (pParFilterExpression = new ParFilterExpressionElements());
	}
	
	public ParserRule getParFilterExpressionRule() {
		return getParFilterExpressionAccess().getRule();
	}

	//ExpressionFilterExpression:
	//	left=FilterNode operator=Operator right=FilterNode;
	public ExpressionFilterExpressionElements getExpressionFilterExpressionAccess() {
		return (pExpressionFilterExpression != null) ? pExpressionFilterExpression : (pExpressionFilterExpression = new ExpressionFilterExpressionElements());
	}
	
	public ParserRule getExpressionFilterExpressionRule() {
		return getExpressionFilterExpressionAccess().getRule();
	}

	//FilterNode:
	//	GraphNode | Function;
	public FilterNodeElements getFilterNodeAccess() {
		return (pFilterNode != null) ? pFilterNode : (pFilterNode = new FilterNodeElements());
	}
	
	public ParserRule getFilterNodeRule() {
		return getFilterNodeAccess().getRule();
	}

	//Function:
	//	NamedFunction | SparqlFunction;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//NamedFunction hidden(WS):
	//	prefix=[Prefix] ":" name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")";
	public NamedFunctionElements getNamedFunctionAccess() {
		return (pNamedFunction != null) ? pNamedFunction : (pNamedFunction = new NamedFunctionElements());
	}
	
	public ParserRule getNamedFunctionRule() {
		return getNamedFunctionAccess().getRule();
	}

	//SparqlFunction:
	//	name=ID "(" parameters+=Variable ("," parameters+=Variable)? ")";
	public SparqlFunctionElements getSparqlFunctionAccess() {
		return (pSparqlFunction != null) ? pSparqlFunction : (pSparqlFunction = new SparqlFunctionElements());
	}
	
	public ParserRule getSparqlFunctionRule() {
		return getSparqlFunctionAccess().getRule();
	}

	//BuiltInCall:
	//	"STR" "(" expr=Expression ")" //	|	'COALESCE' ExpressionList 
	//	| "LANG" "(" expr=Expression ")" | "LANGMATCHES" "(" left=Expression "," right=Expression ")" | "DATATYPE" "("
	//	expr=Expression ")" | "BOUND" "(" var=Variable ")" | "IRI" "(" expr=Expression ")" | "URI" "(" expr=Expression ")" |
	//	"BNODE" "(" expr=Expression // | NIL ) 
	//	")" | "IF" "(" ifExpr=Expression "," thenExpr=Expression "," elseExpr=Expression ")" | "STRLANG" "(" left=Expression
	//	"," right=Expression ")" | "STRDT" "(" left=Expression "," right=Expression ")" | "sameTerm" "(" left=Expression ","
	//	right=Expression ")" | "isIRI" "(" expr=Expression ")" | "isURI" "(" expr=Expression ")" | "isBLANK" "("
	//	expr=Expression ")" | "isLITERAL" "(" expr=Expression ")";
	public BuiltInCallElements getBuiltInCallAccess() {
		return (pBuiltInCall != null) ? pBuiltInCall : (pBuiltInCall = new BuiltInCallElements());
	}
	
	public ParserRule getBuiltInCallRule() {
		return getBuiltInCallAccess().getRule();
	}

	//Aggregate:
	//	{CountAggregate} "COUNT" "(" isDistinct?="DISTINCT"? (isAll?="*" | expr=Expression) ")" | {SumAggregate} "SUM"
	//	expr=ExprAggArg | {MinAgregate} "MIN" expr=ExprAggArg | {MaxAggregate} "MAX" expr=ExprAggArg | {AvgAggregate} "AVG"
	//	expr=ExprAggArg | {SampleAggregate} "SAMPLE" expr=ExprAggArg | {GroupAggregate} "GROUP_CONCAT" "("
	//	isDistinct?="DISTINCT"? expr+=Expression ("," expr+=Expression)* (";" "SEPARATOR" "=" value=STRING)? ")";
	public AggregateElements getAggregateAccess() {
		return (pAggregate != null) ? pAggregate : (pAggregate = new AggregateElements());
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}

	//ExprAggArg:
	//	"(" isDistinct?="DISTINCT"? expr=Expression ")";
	public ExprAggArgElements getExprAggArgAccess() {
		return (pExprAggArg != null) ? pExprAggArg : (pExprAggArg = new ExprAggArgElements());
	}
	
	public ParserRule getExprAggArgRule() {
		return getExprAggArgAccess().getRule();
	}

	//enum Operator:
	//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | sum="+" | div="/" |
	//	sub="-" | multiplicity="*";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//GraphNode:
	//	Variable | Value | IRI | BlankNode | Parameter;
	public GraphNodeElements getGraphNodeAccess() {
		return (pGraphNode != null) ? pGraphNode : (pGraphNode = new GraphNodeElements());
	}
	
	public ParserRule getGraphNodeRule() {
		return getGraphNodeAccess().getRule();
	}

	//Variable:
	//	UnNamedVariable | NamedVariable;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//UnNamedVariable:
	//	"?" name=ID;
	public UnNamedVariableElements getUnNamedVariableAccess() {
		return (pUnNamedVariable != null) ? pUnNamedVariable : (pUnNamedVariable = new UnNamedVariableElements());
	}
	
	public ParserRule getUnNamedVariableRule() {
		return getUnNamedVariableAccess().getRule();
	}

	//NamedVariable:
	//	prefix=[Prefix] ":" name=ID;
	public NamedVariableElements getNamedVariableAccess() {
		return (pNamedVariable != null) ? pNamedVariable : (pNamedVariable = new NamedVariableElements());
	}
	
	public ParserRule getNamedVariableRule() {
		return getNamedVariableAccess().getRule();
	}

	//BlankNode hidden(WS):
	//	"_:" name=ID;
	public BlankNodeElements getBlankNodeAccess() {
		return (pBlankNode != null) ? pBlankNode : (pBlankNode = new BlankNodeElements());
	}
	
	public ParserRule getBlankNodeRule() {
		return getBlankNodeAccess().getRule();
	}

	//Parameter hidden(WS):
	//	"?:" name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Value:
	//	StringValue | IntegerValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IRI:
	//	{IRI} value=IRI_TERMINAL;
	public IRIElements getIRIAccess() {
		return (pIRI != null) ? pIRI : (pIRI = new IRIElements());
	}
	
	public ParserRule getIRIRule() {
		return getIRIAccess().getRule();
	}

	//StringValue:
	//	value=STRING tag=RDFTag?;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntegerValue:
	//	value=INT tag=RDFTag?;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//RDFTag:
	//	TypeTag | LangTag;
	public RDFTagElements getRDFTagAccess() {
		return (pRDFTag != null) ? pRDFTag : (pRDFTag = new RDFTagElements());
	}
	
	public ParserRule getRDFTagRule() {
		return getRDFTagAccess().getRule();
	}

	//TypeTag hidden(WS):
	//	"^^" type=GraphNode;
	public TypeTagElements getTypeTagAccess() {
		return (pTypeTag != null) ? pTypeTag : (pTypeTag = new TypeTagElements());
	}
	
	public ParserRule getTypeTagRule() {
		return getTypeTagAccess().getRule();
	}

	//LangTag hidden(WS):
	//	"@" lang=ID;
	public LangTagElements getLangTagAccess() {
		return (pLangTag != null) ? pLangTag : (pLangTag = new LangTagElements());
	}
	
	public ParserRule getLangTagRule() {
		return getLangTagAccess().getRule();
	}

	//terminal IRI_TERMINAL:
	//	"<" ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | ":" | "." | "#" | "?")* ">";
	public TerminalRule getIRI_TERMINALRule() {
		return (tIRI_TERMINAL != null) ? tIRI_TERMINAL : (tIRI_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IRI_TERMINAL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | "." | "#" | "?")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
