/*
* generated by Xtext
*/
parser grammar InternalSparql;

options {
	tokenVocab=InternalSparql;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package com.emftriple.query.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.emftriple.query.services.SparqlGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

 	private SparqlGrammarAccess grammarAccess;
 	
    public InternalSparqlParser(TokenStream input, IAstFactory factory, SparqlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/emftriple/query/parser/antlr/internal/InternalSparql.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SPARQLQuery";	
   	} 
   	   	
   	@Override
   	protected SparqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSPARQLQuery
entryRuleSPARQLQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSPARQLQueryRule(), currentNode); }
	 iv_ruleSPARQLQuery=ruleSPARQLQuery 
	 { $current=$iv_ruleSPARQLQuery.current; } 
	 EOF 
;

// Rule SPARQLQuery
ruleSPARQLQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSPARQLQueryAccess().getSelectionQueryParserRuleCall_0(), currentNode); 
    }
    this_SelectionQuery_0=ruleSelectionQuery
    { 
        $current = $this_SelectionQuery_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSPARQLQueryAccess().getUpdateQueryParserRuleCall_1(), currentNode); 
    }
    this_UpdateQuery_1=ruleUpdateQuery
    { 
        $current = $this_UpdateQuery_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrefixRule(), currentNode); }
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current; } 
	 EOF 
;

// Rule Prefix
rulePrefix returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_66 
    {
        createLeafNode(grammarAccess.getPrefixAccess().getPREFIXKeyword_0_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getPrefixAccess().getColonKeyword_0_2(), null); 
    }
(
(
		lv_iref_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getPrefixAccess().getIrefIRI_TERMINALTerminalRuleCall_0_3_0(), "iref"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"iref",
	        		lv_iref_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrefixAccess().getUnNamedPrefixParserRuleCall_1(), currentNode); 
    }
    this_UnNamedPrefix_4=ruleUnNamedPrefix
    { 
        $current = $this_UnNamedPrefix_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUnNamedPrefix
entryRuleUnNamedPrefix returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnNamedPrefixRule(), currentNode); }
	 iv_ruleUnNamedPrefix=ruleUnNamedPrefix 
	 { $current=$iv_ruleUnNamedPrefix.current; } 
	 EOF 
;

// Rule UnNamedPrefix
ruleUnNamedPrefix returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_66 
    {
        createLeafNode(grammarAccess.getUnNamedPrefixAccess().getPREFIXKeyword_0(), null); 
    }

	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getUnNamedPrefixAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_iref_2_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getUnNamedPrefixAccess().getIrefIRI_TERMINALTerminalRuleCall_2_0(), "iref"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnNamedPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"iref",
	        		lv_iref_2_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBase
entryRuleBase returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBaseRule(), currentNode); }
	 iv_ruleBase=ruleBase 
	 { $current=$iv_ruleBase.current; } 
	 EOF 
;

// Rule Base
ruleBase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_37 
    {
        createLeafNode(grammarAccess.getBaseAccess().getBASEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBaseAccess().getIrefIRIParserRuleCall_1_0(), currentNode); 
	    }
		lv_iref_1_0=ruleIRI		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"iref",
	        		lv_iref_1_0, 
	        		"IRI", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSelectionQuery
entryRuleSelectionQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectionQueryRule(), currentNode); }
	 iv_ruleSelectionQuery=ruleSelectionQuery 
	 { $current=$iv_ruleSelectionQuery.current; } 
	 EOF 
;

// Rule SelectionQuery
ruleSelectionQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectionQueryAccess().getConstructQueryParserRuleCall_0(), currentNode); 
    }
    this_ConstructQuery_0=ruleConstructQuery
    { 
        $current = $this_ConstructQuery_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectionQueryAccess().getSelectQueryParserRuleCall_1(), currentNode); 
    }
    this_SelectQuery_1=ruleSelectQuery
    { 
        $current = $this_SelectQuery_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectionQueryAccess().getAskQueryParserRuleCall_2(), currentNode); 
    }
    this_AskQuery_2=ruleAskQuery
    { 
        $current = $this_AskQuery_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectionQueryAccess().getDescribeQueryParserRuleCall_3(), currentNode); 
    }
    this_DescribeQuery_3=ruleDescribeQuery
    { 
        $current = $this_DescribeQuery_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSelectQuery
entryRuleSelectQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectQueryRule(), currentNode); }
	 iv_ruleSelectQuery=ruleSelectQuery 
	 { $current=$iv_ruleSelectQuery.current; } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectQueryAccess().getSelectAllQueryParserRuleCall_0(), currentNode); 
    }
    this_SelectAllQuery_0=ruleSelectAllQuery
    { 
        $current = $this_SelectAllQuery_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectQueryAccess().getSelectVariablesQueryParserRuleCall_1(), currentNode); 
    }
    this_SelectVariablesQuery_1=ruleSelectVariablesQuery
    { 
        $current = $this_SelectVariablesQuery_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSelectAllQuery
entryRuleSelectAllQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectAllQueryRule(), currentNode); }
	 iv_ruleSelectAllQuery=ruleSelectAllQuery 
	 { $current=$iv_ruleSelectAllQuery.current; } 
	 EOF 
;

// Rule SelectAllQuery
ruleSelectAllQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getBaseBaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_base_0_0=ruleBase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"base",
	        		lv_base_0_0, 
	        		"Base", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_68 
    {
        createLeafNode(grammarAccess.getSelectAllQueryAccess().getSELECTKeyword_2(), null); 
    }
((
(
		lv_isDistinct_3_0=
	KEYWORD_77 
    {
        createLeafNode(grammarAccess.getSelectAllQueryAccess().getIsDistinctDISTINCTKeyword_3_0_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_isReduced_4_0=
	KEYWORD_71 
    {
        createLeafNode(grammarAccess.getSelectAllQueryAccess().getIsReducedREDUCEDKeyword_3_1_0(), "isReduced"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isReduced", true, "REDUCED", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		lv_all_5_0=
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getSelectAllQueryAccess().getAllAsteriskKeyword_4_0(), "all"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "all", true, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getDatasetClauseDatasetClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_datasetClause_6_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"datasetClause",
	        		lv_datasetClause_6_0, 
	        		"DatasetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getWhereClauseWhereClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_whereClause_7_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_7_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getGroupClauseGroupClauseParserRuleCall_7_0(), currentNode); 
	    }
		lv_groupClause_8_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_8_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getHavingClauseHavingClauseParserRuleCall_8_0(), currentNode); 
	    }
		lv_havingClause_9_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_9_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectAllQueryAccess().getLimitClauseLimitClauseParserRuleCall_9_0(), currentNode); 
	    }
		lv_limitClause_10_0=ruleLimitClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectAllQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitClause",
	        		lv_limitClause_10_0, 
	        		"LimitClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSelectVariablesQuery
entryRuleSelectVariablesQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectVariablesQueryRule(), currentNode); }
	 iv_ruleSelectVariablesQuery=ruleSelectVariablesQuery 
	 { $current=$iv_ruleSelectVariablesQuery.current; } 
	 EOF 
;

// Rule SelectVariablesQuery
ruleSelectVariablesQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getBaseBaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_base_0_0=ruleBase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"base",
	        		lv_base_0_0, 
	        		"Base", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_68 
    {
        createLeafNode(grammarAccess.getSelectVariablesQueryAccess().getSELECTKeyword_2(), null); 
    }
((
(
		lv_isDistinct_3_0=
	KEYWORD_77 
    {
        createLeafNode(grammarAccess.getSelectVariablesQueryAccess().getIsDistinctDISTINCTKeyword_3_0_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_isReduced_4_0=
	KEYWORD_71 
    {
        createLeafNode(grammarAccess.getSelectVariablesQueryAccess().getIsReducedREDUCEDKeyword_3_1_0(), "isReduced"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isReduced", true, "REDUCED", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getVariablesVariableParserRuleCall_4_0(), currentNode); 
	    }
		lv_variables_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_5_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getVariablesVariableParserRuleCall_5_0(), currentNode); 
	    }
		lv_variables_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_6_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getDatasetClauseDatasetClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_datasetClause_7_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"datasetClause",
	        		lv_datasetClause_7_0, 
	        		"DatasetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getWhereClauseWhereClauseParserRuleCall_7_0(), currentNode); 
	    }
		lv_whereClause_8_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_8_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getGroupClauseGroupClauseParserRuleCall_8_0(), currentNode); 
	    }
		lv_groupClause_9_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_9_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getHavingClauseHavingClauseParserRuleCall_9_0(), currentNode); 
	    }
		lv_havingClause_10_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_10_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectVariablesQueryAccess().getLimitClauseLimitClauseParserRuleCall_10_0(), currentNode); 
	    }
		lv_limitClause_11_0=ruleLimitClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectVariablesQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitClause",
	        		lv_limitClause_11_0, 
	        		"LimitClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAskQuery
entryRuleAskQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAskQueryRule(), currentNode); }
	 iv_ruleAskQuery=ruleAskQuery 
	 { $current=$iv_ruleAskQuery.current; } 
	 EOF 
;

// Rule AskQuery
ruleAskQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getBaseBaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_base_0_0=ruleBase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"base",
	        		lv_base_0_0, 
	        		"Base", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_28 
    {
        createLeafNode(grammarAccess.getAskQueryAccess().getASKKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getDatasetClauseDatasetClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_datasetClause_3_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"datasetClause",
	        		lv_datasetClause_3_0, 
	        		"DatasetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getWhereClauseWhereClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_whereClause_4_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_4_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getGroupClauseGroupClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_groupClause_5_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_5_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getHavingClauseHavingClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_havingClause_6_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_6_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAskQueryAccess().getLimitClauseLimitClauseParserRuleCall_7_0(), currentNode); 
	    }
		lv_limitClause_7_0=ruleLimitClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAskQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitClause",
	        		lv_limitClause_7_0, 
	        		"LimitClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleDescribeQuery
entryRuleDescribeQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDescribeQueryRule(), currentNode); }
	 iv_ruleDescribeQuery=ruleDescribeQuery 
	 { $current=$iv_ruleDescribeQuery.current; } 
	 EOF 
;

// Rule DescribeQuery
ruleDescribeQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getBaseBaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_base_0_0=ruleBase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"base",
	        		lv_base_0_0, 
	        		"Base", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_76 
    {
        createLeafNode(grammarAccess.getDescribeQueryAccess().getDESCRIBEKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getVariablesGraphNodeParserRuleCall_3_0(), currentNode); 
	    }
		lv_variables_3_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_3_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getVariablesGraphNodeParserRuleCall_4_0(), currentNode); 
	    }
		lv_variables_4_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_4_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getDatasetClauseDatasetClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_datasetClause_5_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"datasetClause",
	        		lv_datasetClause_5_0, 
	        		"DatasetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getWhereClauseWhereClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_whereClause_6_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_6_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getGroupClauseGroupClauseParserRuleCall_7_0(), currentNode); 
	    }
		lv_groupClause_7_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_7_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getHavingClauseHavingClauseParserRuleCall_8_0(), currentNode); 
	    }
		lv_havingClause_8_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_8_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDescribeQueryAccess().getLimitClauseLimitClauseParserRuleCall_9_0(), currentNode); 
	    }
		lv_limitClause_9_0=ruleLimitClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDescribeQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitClause",
	        		lv_limitClause_9_0, 
	        		"LimitClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleConstructQuery
entryRuleConstructQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructQueryRule(), currentNode); }
	 iv_ruleConstructQuery=ruleConstructQuery 
	 { $current=$iv_ruleConstructQuery.current; } 
	 EOF 
;

// Rule ConstructQuery
ruleConstructQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getBaseBaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_base_0_0=ruleBase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"base",
	        		lv_base_0_0, 
	        		"Base", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_80 
    {
        createLeafNode(grammarAccess.getConstructQueryAccess().getCONSTRUCTKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getConstructTemplateGroupGraphPatternParserRuleCall_3_0(), currentNode); 
	    }
		lv_constructTemplate_3_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constructTemplate",
	        		lv_constructTemplate_3_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getDatasetClauseDatasetClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_datasetClause_4_0=ruleDatasetClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"datasetClause",
	        		lv_datasetClause_4_0, 
	        		"DatasetClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getWhereClauseWhereClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_whereClause_5_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_5_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getGroupClauseGroupClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_groupClause_6_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_6_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getHavingClauseHavingClauseParserRuleCall_7_0(), currentNode); 
	    }
		lv_havingClause_7_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_7_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructQueryAccess().getLimitClauseLimitClauseParserRuleCall_8_0(), currentNode); 
	    }
		lv_limitClause_8_0=ruleLimitClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitClause",
	        		lv_limitClause_8_0, 
	        		"LimitClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleUpdateQuery
entryRuleUpdateQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpdateQueryRule(), currentNode); }
	 iv_ruleUpdateQuery=ruleUpdateQuery 
	 { $current=$iv_ruleUpdateQuery.current; } 
	 EOF 
;

// Rule UpdateQuery
ruleUpdateQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUpdateQueryAccess().getUpdateQueryAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUpdateQueryAccess().getUpdateQueryAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateQueryAccess().getPrefixesPrefixParserRuleCall_1_0(), currentNode); 
	    }
		lv_prefixes_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prefixes",
	        		lv_prefixes_1_0, 
	        		"Prefix", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpdateQueryAccess().getOperationsUpdateOperationParserRuleCall_2_0(), currentNode); 
	    }
		lv_operations_2_0=ruleUpdateOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpdateQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_2_0, 
	        		"UpdateOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleUpdateOperation
entryRuleUpdateOperation returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpdateOperationRule(), currentNode); }
	 iv_ruleUpdateOperation=ruleUpdateOperation 
	 { $current=$iv_ruleUpdateOperation.current; } 
	 EOF 
;

// Rule UpdateOperation
ruleUpdateOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUpdateOperationAccess().getModifyQueryParserRuleCall_0(), currentNode); 
    }
    this_ModifyQuery_0=ruleModifyQuery
    { 
        $current = $this_ModifyQuery_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUpdateOperationAccess().getCreateGraphQueryParserRuleCall_1(), currentNode); 
    }
    this_CreateGraphQuery_1=ruleCreateGraphQuery
    { 
        $current = $this_CreateGraphQuery_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUpdateOperationAccess().getDropGraphQueryParserRuleCall_2(), currentNode); 
    }
    this_DropGraphQuery_2=ruleDropGraphQuery
    { 
        $current = $this_DropGraphQuery_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUpdateOperationAccess().getLoadGraphQueryParserRuleCall_3(), currentNode); 
    }
    this_LoadGraphQuery_3=ruleLoadGraphQuery
    { 
        $current = $this_LoadGraphQuery_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUpdateOperationAccess().getClearGraphQueryParserRuleCall_4(), currentNode); 
    }
    this_ClearGraphQuery_4=ruleClearGraphQuery
    { 
        $current = $this_ClearGraphQuery_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleModifyQuery
entryRuleModifyQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getModifyQueryRule(), currentNode); }
	 iv_ruleModifyQuery=ruleModifyQuery 
	 { $current=$iv_ruleModifyQuery.current; } 
	 EOF 
;

// Rule ModifyQuery
ruleModifyQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getModifyQueryAccess().getWITHKeyword_0_0_0(), null); 
    }
(
(
		lv_withGraph_1_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getModifyQueryAccess().getWithGraphIRI_TERMINALTerminalRuleCall_0_0_1_0(), "withGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withGraph",
	        		lv_withGraph_1_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifyQueryAccess().getQueryInsertQueryParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_query_2_0=ruleInsertQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_2_0, 
	        		"InsertQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getModifyQueryAccess().getWITHKeyword_1_0_0(), null); 
    }
(
(
		lv_withGraph_4_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getModifyQueryAccess().getWithGraphIRI_TERMINALTerminalRuleCall_1_0_1_0(), "withGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withGraph",
	        		lv_withGraph_4_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifyQueryAccess().getQueryInsertDataQueryParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_query_5_0=ruleInsertDataQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_5_0, 
	        		"InsertDataQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getModifyQueryAccess().getWITHKeyword_2_0_0(), null); 
    }
(
(
		lv_withGraph_7_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getModifyQueryAccess().getWithGraphIRI_TERMINALTerminalRuleCall_2_0_1_0(), "withGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withGraph",
	        		lv_withGraph_7_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifyQueryAccess().getQueryDeleteQueryParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_query_8_0=ruleDeleteQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_8_0, 
	        		"DeleteQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getModifyQueryAccess().getWITHKeyword_3_0_0(), null); 
    }
(
(
		lv_withGraph_10_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getModifyQueryAccess().getWithGraphIRI_TERMINALTerminalRuleCall_3_0_1_0(), "withGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withGraph",
	        		lv_withGraph_10_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifyQueryAccess().getQueryDeleteDataQueryParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_query_11_0=ruleDeleteDataQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_11_0, 
	        		"DeleteDataQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	KEYWORD_44 
    {
        createLeafNode(grammarAccess.getModifyQueryAccess().getWITHKeyword_4_0_0(), null); 
    }
(
(
		lv_withGraph_13_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getModifyQueryAccess().getWithGraphIRI_TERMINALTerminalRuleCall_4_0_1_0(), "withGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withGraph",
	        		lv_withGraph_13_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifyQueryAccess().getQueryDeleteWhereQueryParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_query_14_0=ruleDeleteWhereQuery		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifyQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"query",
	        		lv_query_14_0, 
	        		"DeleteWhereQuery", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleCreateGraphQuery
entryRuleCreateGraphQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCreateGraphQueryRule(), currentNode); }
	 iv_ruleCreateGraphQuery=ruleCreateGraphQuery 
	 { $current=$iv_ruleCreateGraphQuery.current; } 
	 EOF 
;

// Rule CreateGraphQuery
ruleCreateGraphQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_60 
    {
        createLeafNode(grammarAccess.getCreateGraphQueryAccess().getCREATEKeyword_0(), null); 
    }
(
(
		lv_isSilent_1_0=
	KEYWORD_69 
    {
        createLeafNode(grammarAccess.getCreateGraphQueryAccess().getIsSilentSILENTKeyword_1_0(), "isSilent"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCreateGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isSilent", lv_isSilent_1_0, "SILENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getCreateGraphQueryAccess().getGRAPHKeyword_2(), null); 
    }
(
(
		lv_graph_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getCreateGraphQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_3_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCreateGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDropGraphQuery
entryRuleDropGraphQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDropGraphQueryRule(), currentNode); }
	 iv_ruleDropGraphQuery=ruleDropGraphQuery 
	 { $current=$iv_ruleDropGraphQuery.current; } 
	 EOF 
;

// Rule DropGraphQuery
ruleDropGraphQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_39 
    {
        createLeafNode(grammarAccess.getDropGraphQueryAccess().getDROPKeyword_0(), null); 
    }
(
(
		lv_isSilent_1_0=
	KEYWORD_69 
    {
        createLeafNode(grammarAccess.getDropGraphQueryAccess().getIsSilentSILENTKeyword_1_0(), "isSilent"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDropGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isSilent", lv_isSilent_1_0, "SILENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getDropGraphQueryAccess().getGRAPHKeyword_2(), null); 
    }
(
(
		lv_graph_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getDropGraphQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_3_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDropGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLoadGraphQuery
entryRuleLoadGraphQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoadGraphQueryRule(), currentNode); }
	 iv_ruleLoadGraphQuery=ruleLoadGraphQuery 
	 { $current=$iv_ruleLoadGraphQuery.current; } 
	 EOF 
;

// Rule LoadGraphQuery
ruleLoadGraphQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_43 
    {
        createLeafNode(grammarAccess.getLoadGraphQueryAccess().getLOADKeyword_0(), null); 
    }
(
(
		lv_graph_1_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getLoadGraphQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_1_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_1_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_41 
    {
        createLeafNode(grammarAccess.getLoadGraphQueryAccess().getINTOKeyword_2_0(), null); 
    }

	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getLoadGraphQueryAccess().getGRAPHKeyword_2_1(), null); 
    }
(
(
		lv_intoGraph_4_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getLoadGraphQueryAccess().getIntoGraphIRI_TERMINALTerminalRuleCall_2_2_0(), "intoGraph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intoGraph",
	        		lv_intoGraph_4_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleClearGraphQuery
entryRuleClearGraphQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getClearGraphQueryRule(), currentNode); }
	 iv_ruleClearGraphQuery=ruleClearGraphQuery 
	 { $current=$iv_ruleClearGraphQuery.current; } 
	 EOF 
;

// Rule ClearGraphQuery
ruleClearGraphQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_47 
    {
        createLeafNode(grammarAccess.getClearGraphQueryAccess().getCLEARKeyword_0(), null); 
    }

	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getClearGraphQueryAccess().getGRAPHKeyword_1(), null); 
    }
((
(
		lv_uri_2_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getClearGraphQueryAccess().getUriIRI_TERMINALTerminalRuleCall_2_0_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClearGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_2_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_isDefault_3_0=
	KEYWORD_70 
    {
        createLeafNode(grammarAccess.getClearGraphQueryAccess().getIsDefaultDEFAULTKeyword_2_1_0(), "isDefault"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClearGraphQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDefault", true, "DEFAULT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;







// Entry rule entryRuleInsertQuery
entryRuleInsertQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInsertQueryRule(), currentNode); }
	 iv_ruleInsertQuery=ruleInsertQuery 
	 { $current=$iv_ruleInsertQuery.current; } 
	 EOF 
;

// Rule InsertQuery
ruleInsertQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_65 
    {
        createLeafNode(grammarAccess.getInsertQueryAccess().getINSERTKeyword_0(), null); 
    }
(
	KEYWORD_41 
    {
        createLeafNode(grammarAccess.getInsertQueryAccess().getINTOKeyword_1_0(), null); 
    }
(
(
		lv_graph_2_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getInsertQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_1_1_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_2_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInsertQueryAccess().getPatternGroupGraphPatternParserRuleCall_2_0(), currentNode); 
	    }
		lv_pattern_3_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_3_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInsertQueryAccess().getWhereClauseWhereClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_whereClause_4_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_4_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleInsertDataQuery
entryRuleInsertDataQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getInsertDataQueryRule(), currentNode); }
	 iv_ruleInsertDataQuery=ruleInsertDataQuery 
	 { $current=$iv_ruleInsertDataQuery.current; } 
	 EOF 
;

// Rule InsertDataQuery
ruleInsertDataQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_65 
    {
        createLeafNode(grammarAccess.getInsertDataQueryAccess().getINSERTKeyword_0(), null); 
    }

	KEYWORD_38 
    {
        createLeafNode(grammarAccess.getInsertDataQueryAccess().getDATAKeyword_1(), null); 
    }
(
	KEYWORD_41 
    {
        createLeafNode(grammarAccess.getInsertDataQueryAccess().getINTOKeyword_2_0(), null); 
    }
(
(
		lv_graph_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getInsertDataQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_2_1_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertDataQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInsertDataQueryAccess().getPatternGroupGraphPatternParserRuleCall_3_0(), currentNode); 
	    }
		lv_pattern_4_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertDataQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_4_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDeleteQuery
entryRuleDeleteQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeleteQueryRule(), currentNode); }
	 iv_ruleDeleteQuery=ruleDeleteQuery 
	 { $current=$iv_ruleDeleteQuery.current; } 
	 EOF 
;

// Rule DeleteQuery
ruleDeleteQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_61 
    {
        createLeafNode(grammarAccess.getDeleteQueryAccess().getDELETEKeyword_0(), null); 
    }
(
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getDeleteQueryAccess().getFROMKeyword_1_0(), null); 
    }
(
(
		lv_graph_2_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getDeleteQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_1_1_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_2_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteQueryAccess().getPatternGroupGraphPatternParserRuleCall_2_0(), currentNode); 
	    }
		lv_pattern_3_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_3_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_65 
    {
        createLeafNode(grammarAccess.getDeleteQueryAccess().getINSERTKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteQueryAccess().getInsertPatternGroupGraphPatternParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_insertPattern_5_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"insertPattern",
	        		lv_insertPattern_5_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteQueryAccess().getWhereClauseWhereClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_whereClause_6_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_6_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleDeleteDataQuery
entryRuleDeleteDataQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeleteDataQueryRule(), currentNode); }
	 iv_ruleDeleteDataQuery=ruleDeleteDataQuery 
	 { $current=$iv_ruleDeleteDataQuery.current; } 
	 EOF 
;

// Rule DeleteDataQuery
ruleDeleteDataQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_61 
    {
        createLeafNode(grammarAccess.getDeleteDataQueryAccess().getDELETEKeyword_0(), null); 
    }

	KEYWORD_38 
    {
        createLeafNode(grammarAccess.getDeleteDataQueryAccess().getDATAKeyword_1(), null); 
    }
(
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getDeleteDataQueryAccess().getFROMKeyword_2_0(), null); 
    }
(
(
		lv_graph_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getDeleteDataQueryAccess().getGraphIRI_TERMINALTerminalRuleCall_2_1_0(), "graph"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteDataQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteDataQueryAccess().getPatternGroupGraphPatternParserRuleCall_3_0(), currentNode); 
	    }
		lv_pattern_4_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteDataQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_4_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDeleteWhereQuery
entryRuleDeleteWhereQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeleteWhereQueryRule(), currentNode); }
	 iv_ruleDeleteWhereQuery=ruleDeleteWhereQuery 
	 { $current=$iv_ruleDeleteWhereQuery.current; } 
	 EOF 
;

// Rule DeleteWhereQuery
ruleDeleteWhereQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_61 
    {
        createLeafNode(grammarAccess.getDeleteWhereQueryAccess().getDELETEKeyword_0(), null); 
    }

	KEYWORD_57 
    {
        createLeafNode(grammarAccess.getDeleteWhereQueryAccess().getWHEREKeyword_1(), null); 
    }

	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getDeleteWhereQueryAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeleteWhereQueryAccess().getPatternGroupGraphPatternParserRuleCall_3_0(), currentNode); 
	    }
		lv_pattern_3_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeleteWhereQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_3_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getDeleteWhereQueryAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDatasetClause
entryRuleDatasetClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatasetClauseRule(), currentNode); }
	 iv_ruleDatasetClause=ruleDatasetClause 
	 { $current=$iv_ruleDatasetClause.current; } 
	 EOF 
;

// Rule DatasetClause
ruleDatasetClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDatasetClauseAccess().getDefaultDataSetParserRuleCall_0(), currentNode); 
    }
    this_DefaultDataSet_0=ruleDefaultDataSet
    { 
        $current = $this_DefaultDataSet_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDatasetClauseAccess().getNamedDataSetParserRuleCall_1(), currentNode); 
    }
    this_NamedDataSet_1=ruleNamedDataSet
    { 
        $current = $this_NamedDataSet_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDatasetClauseAccess().getServiceDataSetParserRuleCall_2(), currentNode); 
    }
    this_ServiceDataSet_2=ruleServiceDataSet
    { 
        $current = $this_ServiceDataSet_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDefaultDataSet
entryRuleDefaultDataSet returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefaultDataSetRule(), currentNode); }
	 iv_ruleDefaultDataSet=ruleDefaultDataSet 
	 { $current=$iv_ruleDefaultDataSet.current; } 
	 EOF 
;

// Rule DefaultDataSet
ruleDefaultDataSet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getDefaultDataSetAccess().getFROMKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefaultDataSetAccess().getDataSetIRIParserRuleCall_1_0(), currentNode); 
	    }
		lv_dataSet_1_0=ruleIRI		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefaultDataSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataSet",
	        		lv_dataSet_1_0, 
	        		"IRI", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNamedDataSet
entryRuleNamedDataSet returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedDataSetRule(), currentNode); }
	 iv_ruleNamedDataSet=ruleNamedDataSet 
	 { $current=$iv_ruleNamedDataSet.current; } 
	 EOF 
;

// Rule NamedDataSet
ruleNamedDataSet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getNamedDataSetAccess().getFROMKeyword_0(), null); 
    }

	KEYWORD_53 
    {
        createLeafNode(grammarAccess.getNamedDataSetAccess().getNAMEDKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamedDataSetAccess().getDataSetIRIParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataSet_2_0=ruleIRI		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedDataSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataSet",
	        		lv_dataSet_2_0, 
	        		"IRI", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleServiceDataSet
entryRuleServiceDataSet returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getServiceDataSetRule(), currentNode); }
	 iv_ruleServiceDataSet=ruleServiceDataSet 
	 { $current=$iv_ruleServiceDataSet.current; } 
	 EOF 
;

// Rule ServiceDataSet
ruleServiceDataSet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getServiceDataSetAccess().getFROMKeyword_0(), null); 
    }

	KEYWORD_72 
    {
        createLeafNode(grammarAccess.getServiceDataSetAccess().getSERVICEKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceDataSetAccess().getDataSetIRIParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataSet_2_0=ruleIRI		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceDataSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataSet",
	        		lv_dataSet_2_0, 
	        		"IRI", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhereClauseRule(), currentNode); }
	 iv_ruleWhereClause=ruleWhereClause 
	 { $current=$iv_ruleWhereClause.current; } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_57 
    {
        createLeafNode(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhereClauseAccess().getGroupGraphPatternGroupGraphPatternParserRuleCall_1_0(), currentNode); 
	    }
		lv_groupGraphPattern_1_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhereClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupGraphPattern",
	        		lv_groupGraphPattern_1_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleGroupClause
entryRuleGroupClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupClauseRule(), currentNode); }
	 iv_ruleGroupClause=ruleGroupClause 
	 { $current=$iv_ruleGroupClause.current; } 
	 EOF 
;

// Rule GroupClause
ruleGroupClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_50 
    {
        createLeafNode(grammarAccess.getGroupClauseAccess().getGROUPKeyword_0(), null); 
    }

	KEYWORD_23 
    {
        createLeafNode(grammarAccess.getGroupClauseAccess().getBYKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupClauseAccess().getConditionGroupConditionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleGroupCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"GroupCondition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleGroupCondition
entryRuleGroupCondition returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupConditionRule(), currentNode); }
	 iv_ruleGroupCondition=ruleGroupCondition 
	 { $current=$iv_ruleGroupCondition.current; } 
	 EOF 
;

// Rule GroupCondition
ruleGroupCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupConditionAccess().getBuiltInCallParserRuleCall_0(), currentNode); 
    }
    this_BuiltInCall_0=ruleBuiltInCall
    { 
        $current = $this_BuiltInCall_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupConditionAccess().getFunctionParserRuleCall_1(), currentNode); 
    }
    this_Function_1=ruleFunction
    { 
        $current = $this_Function_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupConditionAccess().getVariableParserRuleCall_2(), currentNode); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleHavingClause
entryRuleHavingClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getHavingClauseRule(), currentNode); }
	 iv_ruleHavingClause=ruleHavingClause 
	 { $current=$iv_ruleHavingClause.current; } 
	 EOF 
;

// Rule HavingClause
ruleHavingClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_64 
    {
        createLeafNode(grammarAccess.getHavingClauseAccess().getHAVINGKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHavingClauseAccess().getConstraintConstraintParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraint_1_0=ruleConstraint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHavingClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraint",
	        		lv_constraint_1_0, 
	        		"Constraint", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraintRule(), currentNode); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getParFilterExpressionParserRuleCall_0(), currentNode); 
    }
    this_ParFilterExpression_0=ruleParFilterExpression
    { 
        $current = $this_ParFilterExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getBuiltInCallParserRuleCall_1(), currentNode); 
    }
    this_BuiltInCall_1=ruleBuiltInCall
    { 
        $current = $this_BuiltInCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getFunctionParserRuleCall_2(), currentNode); 
    }
    this_Function_2=ruleFunction
    { 
        $current = $this_Function_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLimitClause
entryRuleLimitClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLimitClauseRule(), currentNode); }
	 iv_ruleLimitClause=ruleLimitClause 
	 { $current=$iv_ruleLimitClause.current; } 
	 EOF 
;

// Rule LimitClause
ruleLimitClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_51 
    {
        createLeafNode(grammarAccess.getLimitClauseAccess().getLIMITKeyword_0(), null); 
    }
(
(
		lv_limit_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLimitClauseAccess().getLimitINTTerminalRuleCall_1_0(), "limit"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLimitClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limit",
	        		lv_limit_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleGroupGraphPattern
entryRuleGroupGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupGraphPatternRule(), currentNode); }
	 iv_ruleGroupGraphPattern=ruleGroupGraphPattern 
	 { $current=$iv_ruleGroupGraphPattern.current; } 
	 EOF 
;

// Rule GroupGraphPattern
ruleGroupGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupGraphPatternAccess().getSubSelectQueryParserRuleCall_0(), currentNode); 
    }
    this_SubSelectQuery_0=ruleSubSelectQuery
    { 
        $current = $this_SubSelectQuery_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupGraphPatternAccess().getGroupGraphPatternSubParserRuleCall_1(), currentNode); 
    }
    this_GroupGraphPatternSub_1=ruleGroupGraphPatternSub
    { 
        $current = $this_GroupGraphPatternSub_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSubSelectQuery
entryRuleSubSelectQuery returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubSelectQueryRule(), currentNode); }
	 iv_ruleSubSelectQuery=ruleSubSelectQuery 
	 { $current=$iv_ruleSubSelectQuery.current; } 
	 EOF 
;

// Rule SubSelectQuery
ruleSubSelectQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getSubSelectQueryAccess().getLeftCurlyBracketKeyword_0(), null); 
    }

	KEYWORD_68 
    {
        createLeafNode(grammarAccess.getSubSelectQueryAccess().getSELECTKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubSelectQueryAccess().getVariablesVariableParserRuleCall_2_0(), currentNode); 
	    }
		lv_variables_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubSelectQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_2_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubSelectQueryAccess().getVariablesVariableParserRuleCall_3_0(), currentNode); 
	    }
		lv_variables_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubSelectQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_3_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_whereClause_4_0=ruleWhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubSelectQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whereClause",
	        		lv_whereClause_4_0, 
	        		"WhereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubSelectQueryAccess().getGroupClauseGroupClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_groupClause_5_0=ruleGroupClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubSelectQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupClause",
	        		lv_groupClause_5_0, 
	        		"GroupClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubSelectQueryAccess().getHavingClauseHavingClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_havingClause_6_0=ruleHavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubSelectQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"havingClause",
	        		lv_havingClause_6_0, 
	        		"HavingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getSubSelectQueryAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleGroupGraphPatternSub
entryRuleGroupGraphPatternSub returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupGraphPatternSubRule(), currentNode); }
	 iv_ruleGroupGraphPatternSub=ruleGroupGraphPatternSub 
	 { $current=$iv_ruleGroupGraphPatternSub.current; } 
	 EOF 
;

// Rule GroupGraphPatternSub
ruleGroupGraphPatternSub returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getGroupGraphPatternSubAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupGraphPatternSubAccess().getGraphPatternsGraphPatternParserRuleCall_1_0(), currentNode); 
	    }
		lv_graphPatterns_1_0=ruleGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupGraphPatternSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphPatterns",
	        		lv_graphPatterns_1_0, 
	        		"GraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getGroupGraphPatternSubAccess().getFullStopKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupGraphPatternSubAccess().getGraphPatternsGraphPatternParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_graphPatterns_3_0=ruleGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupGraphPatternSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphPatterns",
	        		lv_graphPatterns_3_0, 
	        		"GraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getGroupGraphPatternSubAccess().getFullStopKeyword_3(), null); 
    }
)?
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getGroupGraphPatternSubAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleGraphPattern
entryRuleGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGraphPatternRule(), currentNode); }
	 iv_ruleGraphPattern=ruleGraphPattern 
	 { $current=$iv_ruleGraphPattern.current; } 
	 EOF 
;

// Rule GraphPattern
ruleGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getTriplesSameSubjectParserRuleCall_0(), currentNode); 
    }
    this_TriplesSameSubject_0=ruleTriplesSameSubject
    { 
        $current = $this_TriplesSameSubject_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getGroupOrUnionGraphPatternParserRuleCall_1(), currentNode); 
    }
    this_GroupOrUnionGraphPattern_1=ruleGroupOrUnionGraphPattern
    { 
        $current = $this_GroupOrUnionGraphPattern_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getOptionalGraphPatternParserRuleCall_2(), currentNode); 
    }
    this_OptionalGraphPattern_2=ruleOptionalGraphPattern
    { 
        $current = $this_OptionalGraphPattern_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getGraphGraphPatternParserRuleCall_3(), currentNode); 
    }
    this_GraphGraphPattern_3=ruleGraphGraphPattern
    { 
        $current = $this_GraphGraphPattern_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getServiceGraphPatternParserRuleCall_4(), currentNode); 
    }
    this_ServiceGraphPattern_4=ruleServiceGraphPattern
    { 
        $current = $this_ServiceGraphPattern_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getFilterPatternParserRuleCall_5(), currentNode); 
    }
    this_FilterPattern_5=ruleFilterPattern
    { 
        $current = $this_FilterPattern_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getExistsPatternParserRuleCall_6(), currentNode); 
    }
    this_ExistsPattern_6=ruleExistsPattern
    { 
        $current = $this_ExistsPattern_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getNotExistsPatternParserRuleCall_7(), currentNode); 
    }
    this_NotExistsPattern_7=ruleNotExistsPattern
    { 
        $current = $this_NotExistsPattern_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphPatternAccess().getMinusPatternParserRuleCall_8(), currentNode); 
    }
    this_MinusPattern_8=ruleMinusPattern
    { 
        $current = $this_MinusPattern_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTriplesSameSubject
entryRuleTriplesSameSubject returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getTriplesSameSubjectRule(), currentNode); }
	 iv_ruleTriplesSameSubject=ruleTriplesSameSubject 
	 { $current=$iv_ruleTriplesSameSubject.current; } 
	 EOF 
;

// Rule TriplesSameSubject
ruleTriplesSameSubject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getSubjectGraphNodeParserRuleCall_0_0(), currentNode); 
	    }
		lv_subject_0_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriplesSameSubjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subject",
	        		lv_subject_0_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getPropertyListPropertyListParserRuleCall_1_0(), currentNode); 
	    }
		lv_propertyList_1_0=rulePropertyList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriplesSameSubjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyList",
	        		lv_propertyList_1_0, 
	        		"PropertyList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getTriplesSameSubjectAccess().getSemicolonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTriplesSameSubjectAccess().getPropertyListPropertyListParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_propertyList_3_0=rulePropertyList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriplesSameSubjectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyList",
	        		lv_propertyList_3_0, 
	        		"PropertyList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleGroupOrUnionGraphPattern
entryRuleGroupOrUnionGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupOrUnionGraphPatternRule(), currentNode); }
	 iv_ruleGroupOrUnionGraphPattern=ruleGroupOrUnionGraphPattern 
	 { $current=$iv_ruleGroupOrUnionGraphPattern.current; } 
	 EOF 
;

// Rule GroupOrUnionGraphPattern
ruleGroupOrUnionGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupOrUnionGraphPatternAccess().getGraphPatternsGroupGraphPatternParserRuleCall_0_0(), currentNode); 
	    }
		lv_graphPatterns_0_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupOrUnionGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphPatterns",
	        		lv_graphPatterns_0_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_55 
    {
        createLeafNode(grammarAccess.getGroupOrUnionGraphPatternAccess().getUNIONKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupOrUnionGraphPatternAccess().getGraphPatternsGroupGraphPatternParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_graphPatterns_2_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupOrUnionGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphPatterns",
	        		lv_graphPatterns_2_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleOptionalGraphPattern
entryRuleOptionalGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionalGraphPatternRule(), currentNode); }
	 iv_ruleOptionalGraphPattern=ruleOptionalGraphPattern 
	 { $current=$iv_ruleOptionalGraphPattern.current; } 
	 EOF 
;

// Rule OptionalGraphPattern
ruleOptionalGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_78 
    {
        createLeafNode(grammarAccess.getOptionalGraphPatternAccess().getOPTIONALKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionalGraphPatternAccess().getGraphPatternGroupGraphPatternParserRuleCall_1_0(), currentNode); 
	    }
		lv_graphPattern_1_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphPattern",
	        		lv_graphPattern_1_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePropertyList
entryRulePropertyList returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyListRule(), currentNode); }
	 iv_rulePropertyList=rulePropertyList 
	 { $current=$iv_rulePropertyList.current; } 
	 EOF 
;

// Rule PropertyList
rulePropertyList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyListAccess().getPropertyGraphNodeParserRuleCall_0_0(), currentNode); 
	    }
		lv_property_0_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_0_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyListAccess().getObjectGraphNodeParserRuleCall_1_0(), currentNode); 
	    }
		lv_object_1_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"object",
	        		lv_object_1_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleGraphGraphPattern
entryRuleGraphGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGraphGraphPatternRule(), currentNode); }
	 iv_ruleGraphGraphPattern=ruleGraphGraphPattern 
	 { $current=$iv_ruleGraphGraphPattern.current; } 
	 EOF 
;

// Rule GraphGraphPattern
ruleGraphGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getGraphGraphPatternAccess().getGRAPHKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGraphGraphPatternAccess().getVarGraphNodeParserRuleCall_1_0(), currentNode); 
	    }
		lv_var_1_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"var",
	        		lv_var_1_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGraphGraphPatternAccess().getPatternGroupGraphPatternParserRuleCall_2_0(), currentNode); 
	    }
		lv_pattern_2_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_2_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleServiceGraphPattern
entryRuleServiceGraphPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getServiceGraphPatternRule(), currentNode); }
	 iv_ruleServiceGraphPattern=ruleServiceGraphPattern 
	 { $current=$iv_ruleServiceGraphPattern.current; } 
	 EOF 
;

// Rule ServiceGraphPattern
ruleServiceGraphPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_72 
    {
        createLeafNode(grammarAccess.getServiceGraphPatternAccess().getSERVICEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceGraphPatternAccess().getVarGraphNodeParserRuleCall_1_0(), currentNode); 
	    }
		lv_var_1_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"var",
	        		lv_var_1_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceGraphPatternAccess().getPatternGroupGraphPatternParserRuleCall_2_0(), currentNode); 
	    }
		lv_pattern_2_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceGraphPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_2_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFilterPattern
entryRuleFilterPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFilterPatternRule(), currentNode); }
	 iv_ruleFilterPattern=ruleFilterPattern 
	 { $current=$iv_ruleFilterPattern.current; } 
	 EOF 
;

// Rule FilterPattern
ruleFilterPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_63 
    {
        createLeafNode(grammarAccess.getFilterPatternAccess().getFILTERKeyword_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getFilterPatternAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFilterPatternAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilterPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getFilterPatternAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleExistsPattern
entryRuleExistsPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExistsPatternRule(), currentNode); }
	 iv_ruleExistsPattern=ruleExistsPattern 
	 { $current=$iv_ruleExistsPattern.current; } 
	 EOF 
;

// Rule ExistsPattern
ruleExistsPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_63 
    {
        createLeafNode(grammarAccess.getExistsPatternAccess().getFILTERKeyword_0(), null); 
    }

	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getExistsPatternAccess().getEXISTSKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExistsPatternAccess().getPatternGroupGraphPatternParserRuleCall_2_0(), currentNode); 
	    }
		lv_pattern_2_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_2_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNotExistsPattern
entryRuleNotExistsPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotExistsPatternRule(), currentNode); }
	 iv_ruleNotExistsPattern=ruleNotExistsPattern 
	 { $current=$iv_ruleNotExistsPattern.current; } 
	 EOF 
;

// Rule NotExistsPattern
ruleNotExistsPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_63 
    {
        createLeafNode(grammarAccess.getNotExistsPatternAccess().getFILTERKeyword_0(), null); 
    }

	KEYWORD_33 
    {
        createLeafNode(grammarAccess.getNotExistsPatternAccess().getNOTKeyword_1(), null); 
    }

	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getNotExistsPatternAccess().getEXISTSKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotExistsPatternAccess().getPatternGroupGraphPatternParserRuleCall_3_0(), currentNode); 
	    }
		lv_pattern_3_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotExistsPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_3_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMinusPattern
entryRuleMinusPattern returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinusPatternRule(), currentNode); }
	 iv_ruleMinusPattern=ruleMinusPattern 
	 { $current=$iv_ruleMinusPattern.current; } 
	 EOF 
;

// Rule MinusPattern
ruleMinusPattern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_52 
    {
        createLeafNode(grammarAccess.getMinusPatternAccess().getMINUSKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMinusPatternAccess().getPatternGroupGraphPatternParserRuleCall_1_0(), currentNode); 
	    }
		lv_pattern_1_0=ruleGroupGraphPattern		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinusPatternRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_1_0, 
	        		"GroupGraphPattern", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAndFilterExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndFilterExpression_0=ruleAndFilterExpression
    { 
        $current = $this_AndFilterExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getOrFilterExpressionEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getOrFilterExpressionEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
	KEYWORD_27 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getVerticalLineVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getEntriesAndFilterExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleAndFilterExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_3_0, 
	        		"AndFilterExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleAndFilterExpression
entryRuleAndFilterExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndFilterExpressionRule(), currentNode); }
	 iv_ruleAndFilterExpression=ruleAndFilterExpression 
	 { $current=$iv_ruleAndFilterExpression.current; } 
	 EOF 
;

// Rule AndFilterExpression
ruleAndFilterExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndFilterExpressionAccess().getConcreteFilterExpressionParserRuleCall_0(), currentNode); 
    }
    this_ConcreteFilterExpression_0=ruleConcreteFilterExpression
    { 
        $current = $this_ConcreteFilterExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndFilterExpressionAccess().getAndFilterExpressionEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndFilterExpressionAccess().getAndFilterExpressionEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
	KEYWORD_19 
    {
        createLeafNode(grammarAccess.getAndFilterExpressionAccess().getAmpersandAmpersandKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndFilterExpressionAccess().getEntriesConcreteFilterExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleConcreteFilterExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndFilterExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_3_0, 
	        		"ConcreteFilterExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleConcreteFilterExpression
entryRuleConcreteFilterExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcreteFilterExpressionRule(), currentNode); }
	 iv_ruleConcreteFilterExpression=ruleConcreteFilterExpression 
	 { $current=$iv_ruleConcreteFilterExpression.current; } 
	 EOF 
;

// Rule ConcreteFilterExpression
ruleConcreteFilterExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteFilterExpressionAccess().getParFilterExpressionParserRuleCall_0(), currentNode); 
    }
    this_ParFilterExpression_0=ruleParFilterExpression
    { 
        $current = $this_ParFilterExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteFilterExpressionAccess().getExpressionFilterExpressionParserRuleCall_1(), currentNode); 
    }
    this_ExpressionFilterExpression_1=ruleExpressionFilterExpression
    { 
        $current = $this_ExpressionFilterExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParFilterExpression
entryRuleParFilterExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParFilterExpressionRule(), currentNode); }
	 iv_ruleParFilterExpression=ruleParFilterExpression 
	 { $current=$iv_ruleParFilterExpression.current; } 
	 EOF 
;

// Rule ParFilterExpression
ruleParFilterExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getParFilterExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParFilterExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }

	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getParFilterExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleExpressionFilterExpression
entryRuleExpressionFilterExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionFilterExpressionRule(), currentNode); }
	 iv_ruleExpressionFilterExpression=ruleExpressionFilterExpression 
	 { $current=$iv_ruleExpressionFilterExpression.current; } 
	 EOF 
;

// Rule ExpressionFilterExpression
ruleExpressionFilterExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionFilterExpressionAccess().getLeftFilterNodeParserRuleCall_0_0(), currentNode); 
	    }
		lv_left_0_0=ruleFilterNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionFilterExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"FilterNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionFilterExpressionAccess().getOperatorOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionFilterExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_1_0, 
	        		"Operator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionFilterExpressionAccess().getRightFilterNodeParserRuleCall_2_0(), currentNode); 
	    }
		lv_right_2_0=ruleFilterNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionFilterExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"FilterNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFilterNode
entryRuleFilterNode returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFilterNodeRule(), currentNode); }
	 iv_ruleFilterNode=ruleFilterNode 
	 { $current=$iv_ruleFilterNode.current; } 
	 EOF 
;

// Rule FilterNode
ruleFilterNode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFilterNodeAccess().getGraphNodeParserRuleCall_0(), currentNode); 
    }
    this_GraphNode_0=ruleGraphNode
    { 
        $current = $this_GraphNode_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFilterNodeAccess().getFunctionParserRuleCall_1(), currentNode); 
    }
    this_Function_1=ruleFunction
    { 
        $current = $this_Function_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getNamedFunctionParserRuleCall_0(), currentNode); 
    }
    this_NamedFunction_0=ruleNamedFunction
    { 
        $current = $this_NamedFunction_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getSparqlFunctionParserRuleCall_1(), currentNode); 
    }
    this_SparqlFunction_1=ruleSparqlFunction
    { 
        $current = $this_SparqlFunction_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNamedFunction
entryRuleNamedFunction returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedFunctionRule(), currentNode); }
	 iv_ruleNamedFunction=ruleNamedFunction 
	 { $current=$iv_ruleNamedFunction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NamedFunction
ruleNamedFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedFunctionAccess().getPrefixPrefixCrossReference_0_0(), "prefix"); 
	}

)
)
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getNamedFunctionAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNamedFunctionAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getNamedFunctionAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamedFunctionAccess().getParametersVariableParserRuleCall_4_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getNamedFunctionAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamedFunctionAccess().getParametersVariableParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getNamedFunctionAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSparqlFunction
entryRuleSparqlFunction returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSparqlFunctionRule(), currentNode); }
	 iv_ruleSparqlFunction=ruleSparqlFunction 
	 { $current=$iv_ruleSparqlFunction.current; } 
	 EOF 
;

// Rule SparqlFunction
ruleSparqlFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSparqlFunctionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSparqlFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getSparqlFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSparqlFunctionAccess().getParametersVariableParserRuleCall_2_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSparqlFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getSparqlFunctionAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSparqlFunctionAccess().getParametersVariableParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSparqlFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getSparqlFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleBuiltInCall
entryRuleBuiltInCall returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuiltInCallRule(), currentNode); }
	 iv_ruleBuiltInCall=ruleBuiltInCall 
	 { $current=$iv_ruleBuiltInCall.current; } 
	 EOF 
;

// Rule BuiltInCall
ruleBuiltInCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_34 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSTRKeyword_0_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_0_3(), null); 
    }
)
    |(
	KEYWORD_42 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLANGKeyword_1_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)
    |(
	KEYWORD_83 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLANGMATCHESKeyword_2_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getLeftExpressionParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_left_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_10_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_2_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getRightExpressionParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_right_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_12_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_2_5(), null); 
    }
)
    |(
	KEYWORD_75 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getDATATYPEKeyword_3_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_expr_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_16_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)
    |(
	KEYWORD_46 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getBOUNDKeyword_4_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_4_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getVarVariableParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_var_20_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"var",
	        		lv_var_20_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_4_3(), null); 
    }
)
    |(
	KEYWORD_30 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIRIKeyword_5_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_5_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_expr_24_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_24_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_5_3(), null); 
    }
)
    |(
	KEYWORD_36 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getURIKeyword_6_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_6_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_6_2_0(), currentNode); 
	    }
		lv_expr_28_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_28_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_6_3(), null); 
    }
)
    |(
	KEYWORD_45 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getBNODEKeyword_7_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_7_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_expr_32_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_32_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_7_3(), null); 
    }
)
    |(
	KEYWORD_24 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIFKeyword_8_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_8_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getIfExprExpressionParserRuleCall_8_2_0(), currentNode); 
	    }
		lv_ifExpr_36_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ifExpr",
	        		lv_ifExpr_36_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_8_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getThenExprExpressionParserRuleCall_8_4_0(), currentNode); 
	    }
		lv_thenExpr_38_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpr",
	        		lv_thenExpr_38_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_8_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getElseExprExpressionParserRuleCall_8_6_0(), currentNode); 
	    }
		lv_elseExpr_40_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpr",
	        		lv_elseExpr_40_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_8_7(), null); 
    }
)
    |(
	KEYWORD_73 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSTRLANGKeyword_9_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_9_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getLeftExpressionParserRuleCall_9_2_0(), currentNode); 
	    }
		lv_left_44_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_44_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_9_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getRightExpressionParserRuleCall_9_4_0(), currentNode); 
	    }
		lv_right_46_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_46_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_9_5(), null); 
    }
)
    |(
	KEYWORD_54 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSTRDTKeyword_10_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_10_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getLeftExpressionParserRuleCall_10_2_0(), currentNode); 
	    }
		lv_left_50_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_50_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_10_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getRightExpressionParserRuleCall_10_4_0(), currentNode); 
	    }
		lv_right_52_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_52_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_10_5(), null); 
    }
)
    |(
	KEYWORD_79 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSameTermKeyword_11_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_11_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getLeftExpressionParserRuleCall_11_2_0(), currentNode); 
	    }
		lv_left_56_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_56_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_11_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getRightExpressionParserRuleCall_11_4_0(), currentNode); 
	    }
		lv_right_58_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_58_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_11_5(), null); 
    }
)
    |(
	KEYWORD_58 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIsIRIKeyword_12_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_12_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_12_2_0(), currentNode); 
	    }
		lv_expr_62_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_62_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_12_3(), null); 
    }
)
    |(
	KEYWORD_59 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIsURIKeyword_13_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_13_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_13_2_0(), currentNode); 
	    }
		lv_expr_66_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_66_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_13_3(), null); 
    }
)
    |(
	KEYWORD_74 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIsBLANKKeyword_14_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_14_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_14_2_0(), currentNode); 
	    }
		lv_expr_70_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_70_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_14_3(), null); 
    }
)
    |(
	KEYWORD_82 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getIsLITERALKeyword_15_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_15_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExprExpressionParserRuleCall_15_2_0(), currentNode); 
	    }
		lv_expr_74_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_74_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_15_3(), null); 
    }
))
;







// Entry rule entryRuleExprAggArg
entryRuleExprAggArg returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExprAggArgRule(), currentNode); }
	 iv_ruleExprAggArg=ruleExprAggArg 
	 { $current=$iv_ruleExprAggArg.current; } 
	 EOF 
;

// Rule ExprAggArg
ruleExprAggArg returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getExprAggArgAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		lv_isDistinct_1_0=
	KEYWORD_77 
    {
        createLeafNode(grammarAccess.getExprAggArgAccess().getIsDistinctDISTINCTKeyword_1_0(), "isDistinct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprAggArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDistinct", true, "DISTINCT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprAggArgAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprAggArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getExprAggArgAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleGraphNode
entryRuleGraphNode returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGraphNodeRule(), currentNode); }
	 iv_ruleGraphNode=ruleGraphNode 
	 { $current=$iv_ruleGraphNode.current; } 
	 EOF 
;

// Rule GraphNode
ruleGraphNode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphNodeAccess().getVariableParserRuleCall_0(), currentNode); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphNodeAccess().getValueParserRuleCall_1(), currentNode); 
    }
    this_Value_1=ruleValue
    { 
        $current = $this_Value_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphNodeAccess().getIRIParserRuleCall_2(), currentNode); 
    }
    this_IRI_2=ruleIRI
    { 
        $current = $this_IRI_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphNodeAccess().getBlankNodeParserRuleCall_3(), currentNode); 
    }
    this_BlankNode_3=ruleBlankNode
    { 
        $current = $this_BlankNode_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getGraphNodeAccess().getParameterParserRuleCall_4(), currentNode); 
    }
    this_Parameter_4=ruleParameter
    { 
        $current = $this_Parameter_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getUnNamedVariableParserRuleCall_0(), currentNode); 
    }
    this_UnNamedVariable_0=ruleUnNamedVariable
    { 
        $current = $this_UnNamedVariable_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getNamedVariableParserRuleCall_1(), currentNode); 
    }
    this_NamedVariable_1=ruleNamedVariable
    { 
        $current = $this_NamedVariable_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUnNamedVariable
entryRuleUnNamedVariable returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnNamedVariableRule(), currentNode); }
	 iv_ruleUnNamedVariable=ruleUnNamedVariable 
	 { $current=$iv_ruleUnNamedVariable.current; } 
	 EOF 
;

// Rule UnNamedVariable
ruleUnNamedVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getUnNamedVariableAccess().getQuestionMarkKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUnNamedVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnNamedVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNamedVariable
entryRuleNamedVariable returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedVariableRule(), currentNode); }
	 iv_ruleNamedVariable=ruleNamedVariable 
	 { $current=$iv_ruleNamedVariable.current; } 
	 EOF 
;

// Rule NamedVariable
ruleNamedVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedVariableAccess().getPrefixPrefixCrossReference_0_0(), "prefix"); 
	}

)
)
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getNamedVariableAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNamedVariableAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBlankNode
entryRuleBlankNode returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlankNodeRule(), currentNode); }
	 iv_ruleBlankNode=ruleBlankNode 
	 { $current=$iv_ruleBlankNode.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule BlankNode
ruleBlankNode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_26 
    {
        createLeafNode(grammarAccess.getBlankNodeAccess().get_Keyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBlankNodeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlankNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_22 
    {
        createLeafNode(grammarAccess.getParameterAccess().getQuestionMarkColonKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueRule(), currentNode); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_0(), currentNode); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getIntegerValueParserRuleCall_1(), currentNode); 
    }
    this_IntegerValue_1=ruleIntegerValue
    { 
        $current = $this_IntegerValue_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleIRI
entryRuleIRI returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIRIRule(), currentNode); }
	 iv_ruleIRI=ruleIRI 
	 { $current=$iv_ruleIRI.current; } 
	 EOF 
;

// Rule IRI
ruleIRI returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIRIAccess().getIRIAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIRIAccess().getIRIAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getIRIAccess().getValueIRI_TERMINALTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIRIRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringValueRule(), currentNode); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0(), currentNode); 
	    }
		lv_tag_1_0=ruleRDFTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tag",
	        		lv_tag_1_0, 
	        		"RDFTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerValueRule(), currentNode); }
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current; } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0(), currentNode); 
	    }
		lv_tag_1_0=ruleRDFTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tag",
	        		lv_tag_1_0, 
	        		"RDFTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleRDFTag
entryRuleRDFTag returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getRDFTagRule(), currentNode); }
	 iv_ruleRDFTag=ruleRDFTag 
	 { $current=$iv_ruleRDFTag.current; } 
	 EOF 
;

// Rule RDFTag
ruleRDFTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0(), currentNode); 
    }
    this_TypeTag_0=ruleTypeTag
    { 
        $current = $this_TypeTag_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1(), currentNode); 
    }
    this_LangTag_1=ruleLangTag
    { 
        $current = $this_LangTag_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeTag
entryRuleTypeTag returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeTagRule(), currentNode); }
	 iv_ruleTypeTag=ruleTypeTag 
	 { $current=$iv_ruleTypeTag.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeTag
ruleTypeTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeTagAccess().getTypeGraphNodeParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleGraphNode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"GraphNode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLangTag
entryRuleLangTag returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getLangTagRule(), currentNode); }
	 iv_ruleLangTag=ruleLangTag 
	 { $current=$iv_ruleLangTag.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LangTag
ruleLangTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0(), null); 
    }
(
(
		lv_lang_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0(), "lang"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLangTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lang",
	        		lv_lang_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((    KEYWORD_11
	{
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0(), null); 
    }
)
    |(    KEYWORD_13
	{
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1(), null); 
    }
)
    |(    KEYWORD_20
	{
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2(), null); 
    }
)
    |(    KEYWORD_21
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
)
    |(    KEYWORD_12
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4(), null); 
    }
)
    |(    KEYWORD_18
	{
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5(), null); 
    }
)
    |(    KEYWORD_4
	{
        $current = grammarAccess.getOperatorAccess().getSumEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getSumEnumLiteralDeclaration_6(), null); 
    }
)
    |(    KEYWORD_8
	{
        $current = grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_7(), null); 
    }
)
    |(    KEYWORD_6
	{
        $current = grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_8(), null); 
    }
)
    |(    KEYWORD_3
	{
        $current = grammarAccess.getOperatorAccess().getMultiplicityEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getMultiplicityEnumLiteralDeclaration_9(), null); 
    }
));



